; SMT-LIBv2 description generated by Yosys 0.7+386 (git sha1 ca2adc30, gcc 7.2.1 -march=x86-64 -mtune=generic -O2 -fstack-protector-strong -fPIC -Os)
; yosys-smt2-module TxUART
(declare-sort |TxUART_s| 0)
(declare-fun |TxUART_is| (|TxUART_s|) Bool)
; yosys-smt2-input baud_clk 1
; yosys-smt2-wire baud_clk 1
(declare-fun |TxUART#0| (|TxUART_s|) Bool) ; \baud_clk
(define-fun |TxUART_n baud_clk| ((state |TxUART_s|)) Bool (|TxUART#0| state))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |TxUART#1| (|TxUART_s|) Bool) ; \clk
(define-fun |TxUART_n clk| ((state |TxUART_s|)) Bool (|TxUART#1| state))
; yosys-smt2-input enable 1
; yosys-smt2-wire enable 1
(declare-fun |TxUART#2| (|TxUART_s|) Bool) ; \enable
(define-fun |TxUART_n enable| ((state |TxUART_s|)) Bool (|TxUART#2| state))
; yosys-smt2-input i_data 9
; yosys-smt2-wire i_data 9
(declare-fun |TxUART#3| (|TxUART_s|) (_ BitVec 9)) ; \i_data
(define-fun |TxUART_n i_data| ((state |TxUART_s|)) (_ BitVec 9) (|TxUART#3| state))
; yosys-smt2-output o_busy 1
; yosys-smt2-wire o_busy 1
(declare-fun |TxUART#4| (|TxUART_s|) (_ BitVec 11)) ; \shift_reg
(define-fun |TxUART#5| ((state |TxUART_s|)) Bool (not (or  (= ((_ extract 0 0) (|TxUART#4| state)) #b1) (= ((_ extract 1 1) (|TxUART#4| state)) #b1) (= ((_ extract 2 2) (|TxUART#4| state)) #b1) (= ((_ extract 3 3) (|TxUART#4| state)) #b1) (= ((_ extract 4 4) (|TxUART#4| state)) #b1) (= ((_ extract 5 5) (|TxUART#4| state)) #b1) (= ((_ extract 6 6) (|TxUART#4| state)) #b1) (= ((_ extract 7 7) (|TxUART#4| state)) #b1) (= ((_ extract 8 8) (|TxUART#4| state)) #b1) (= ((_ extract 9 9) (|TxUART#4| state)) #b1) (= ((_ extract 10 10) (|TxUART#4| state)) #b1)))) ; $eq$../rtl/Tx/TxUART.v:29$37_Y
(define-fun |TxUART#6| ((state |TxUART_s|)) Bool (not (or  (|TxUART#5| state) false))) ; \o_busy
(define-fun |TxUART_n o_busy| ((state |TxUART_s|)) Bool (|TxUART#6| state))
; yosys-smt2-output serial_out 1
; yosys-smt2-wire serial_out 1
(define-fun |TxUART_n serial_out| ((state |TxUART_s|)) Bool (= ((_ extract 0 0) (|TxUART#4| state)) #b1))
; yosys-smt2-register shift_reg 11
; yosys-smt2-wire shift_reg 11
(define-fun |TxUART_n shift_reg| ((state |TxUART_s|)) (_ BitVec 11) (|TxUART#4| state))
(define-fun |TxUART#7| ((state |TxUART_s|)) (_ BitVec 1) (bvnot (ite (|TxUART#0| state) #b1 #b0))) ; $0$formal$../rtl/Tx/TxUART.v:34$30_CHECK[0:0]$44
(define-fun |TxUART#8| ((state |TxUART_s|)) Bool (|TxUART_is| state)) ; $0$formal$../rtl/Tx/TxUART.v:34$30_EN[0:0]$45
; yosys-smt2-assume 0 ../rtl/Tx/TxUART.v:34
(define-fun |TxUART_u 0| ((state |TxUART_s|)) Bool (or (= ((_ extract 0 0) (|TxUART#7| state)) #b1) (not (|TxUART#8| state)))) ; $assume$../rtl/Tx/TxUART.v:34$40
(define-fun |TxUART#9| ((state |TxUART_s|)) (_ BitVec 1) (bvnot (ite (|TxUART#2| state) #b1 #b0))) ; $0$formal$../rtl/Tx/TxUART.v:35$32_CHECK[0:0]$46
; yosys-smt2-assume 1 ../rtl/Tx/TxUART.v:35
(define-fun |TxUART_u 1| ((state |TxUART_s|)) Bool (or (= ((_ extract 0 0) (|TxUART#9| state)) #b1) (not (|TxUART#8| state)))) ; $assume$../rtl/Tx/TxUART.v:35$41
; yosys-smt2-cover 0 ../rtl/Tx/TxUART.v:38
(define-fun |TxUART_c 0| ((state |TxUART_s|)) Bool (and (|TxUART#0| state) true)) ; $cover$../rtl/Tx/TxUART.v:38$39
(define-fun |TxUART#10| ((state |TxUART_s|)) (_ BitVec 1) (bvand (ite (|TxUART#2| state) #b1 #b0) (ite (|TxUART#5| state) #b1 #b0))) ; $and$../rtl/Tx/TxUART.v:17$36_Y
(define-fun |TxUART#11| ((state |TxUART_s|)) (_ BitVec 11) (ite (= ((_ extract 0 0) (|TxUART#10| state)) #b1) #b00000000000 (|TxUART#4| state))) ; $procmux$163_Y
(define-fun |TxUART#12| ((state |TxUART_s|)) (_ BitVec 11) (ite (|TxUART#5| state) (|TxUART#11| state) (concat #b00 ((_ extract 9 1) (|TxUART#4| state))))) ; $procmux$167_Y
(define-fun |TxUART#13| ((state |TxUART_s|)) (_ BitVec 11) (ite (|TxUART#0| state) (|TxUART#12| state) (|TxUART#11| state))) ; $0\shift_reg[10:0]
(define-fun |TxUART_a| ((state |TxUART_s|)) Bool true)
(define-fun |TxUART_u| ((state |TxUART_s|)) Bool (and
  (|TxUART_u 0| state)
  (|TxUART_u 1| state)
))
(define-fun |TxUART_i| ((state |TxUART_s|)) Bool 
  (= (|TxUART#4| state) #b00000000000) ; shift_reg
)
(define-fun |TxUART_h| ((state |TxUART_s|)) Bool true)
(define-fun |TxUART_t| ((state |TxUART_s|) (next_state |TxUART_s|)) Bool 
  (= (|TxUART#13| state) (|TxUART#4| next_state)) ; $procdff$196 \shift_reg
) ; end of module TxUART
; yosys-smt2-module synchronizer
(declare-sort |synchronizer_s| 0)
(declare-fun |synchronizer_is| (|synchronizer_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |synchronizer#0| (|synchronizer_s|) Bool) ; \clk
(define-fun |synchronizer_n clk| ((state |synchronizer_s|)) Bool (|synchronizer#0| state))
; yosys-smt2-input serial_in 1
; yosys-smt2-wire serial_in 1
(declare-fun |synchronizer#1| (|synchronizer_s|) Bool) ; \serial_in
(define-fun |synchronizer_n serial_in| ((state |synchronizer_s|)) Bool (|synchronizer#1| state))
; yosys-smt2-register serial_in_reg 1
; yosys-smt2-wire serial_in_reg 1
(declare-fun |synchronizer#2| (|synchronizer_s|) (_ BitVec 1)) ; \serial_in_reg
(define-fun |synchronizer_n serial_in_reg| ((state |synchronizer_s|)) Bool (= ((_ extract 0 0) (|synchronizer#2| state)) #b1))
; yosys-smt2-output serial_in_synced 1
; yosys-smt2-register serial_in_synced 1
; yosys-smt2-wire serial_in_synced 1
(declare-fun |synchronizer#3| (|synchronizer_s|) (_ BitVec 1)) ; \serial_in_synced
(define-fun |synchronizer_n serial_in_synced| ((state |synchronizer_s|)) Bool (= ((_ extract 0 0) (|synchronizer#3| state)) #b1))
(define-fun |synchronizer_a| ((state |synchronizer_s|)) Bool true)
(define-fun |synchronizer_u| ((state |synchronizer_s|)) Bool true)
(define-fun |synchronizer_i| ((state |synchronizer_s|)) Bool true)
(define-fun |synchronizer_h| ((state |synchronizer_s|)) Bool true)
(define-fun |synchronizer_t| ((state |synchronizer_s|) (next_state |synchronizer_s|)) Bool (and
  (= (|synchronizer#2| state) (|synchronizer#3| next_state)) ; $procdff$180 \serial_in_synced
  (= (ite (|synchronizer#1| state) #b1 #b0) (|synchronizer#2| next_state)) ; $procdff$181 \serial_in_reg
)) ; end of module synchronizer
; yosys-smt2-module baud_generator
(declare-sort |baud_generator_s| 0)
(declare-fun |baud_generator_is| (|baud_generator_s|) Bool)
; yosys-smt2-register $formal$../rtl/Tx/baud_generator.v:34$53_CHECK 1
(declare-fun |baud_generator#0| (|baud_generator_s|) (_ BitVec 1)) ; $formal$../rtl/Tx/baud_generator.v:34$53_CHECK
(define-fun |baud_generator_n $formal$../rtl/Tx/baud_generator.v:34$53_CHECK| ((state |baud_generator_s|)) Bool (= ((_ extract 0 0) (|baud_generator#0| state)) #b1))
; yosys-smt2-register $formal$../rtl/Tx/baud_generator.v:34$53_EN 1
(declare-fun |baud_generator#1| (|baud_generator_s|) (_ BitVec 1)) ; $formal$../rtl/Tx/baud_generator.v:34$53_EN
(define-fun |baud_generator_n $formal$../rtl/Tx/baud_generator.v:34$53_EN| ((state |baud_generator_s|)) Bool (= ((_ extract 0 0) (|baud_generator#1| state)) #b1))
; yosys-smt2-output baud_clk 1
; yosys-smt2-wire baud_clk 1
(declare-fun |baud_generator#2| (|baud_generator_s|) (_ BitVec 1)) ; \ck_stb
(define-fun |baud_generator_n baud_clk| ((state |baud_generator_s|)) Bool (= ((_ extract 0 0) (|baud_generator#2| state)) #b1))
; yosys-smt2-register ck_stb 1
; yosys-smt2-wire ck_stb 1
(define-fun |baud_generator_n ck_stb| ((state |baud_generator_s|)) Bool (= ((_ extract 0 0) (|baud_generator#2| state)) #b1))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |baud_generator#3| (|baud_generator_s|) Bool) ; \clk
(define-fun |baud_generator_n clk| ((state |baud_generator_s|)) Bool (|baud_generator#3| state))
; yosys-smt2-register cnt 3
; yosys-smt2-wire cnt 3
(declare-fun |baud_generator#4| (|baud_generator_s|) (_ BitVec 3)) ; \cnt
(define-fun |baud_generator_n cnt| ((state |baud_generator_s|)) (_ BitVec 3) (|baud_generator#4| state))
; yosys-smt2-register counter 4
; yosys-smt2-wire counter 4
(declare-fun |baud_generator#5| (|baud_generator_s|) (_ BitVec 4)) ; \counter
(define-fun |baud_generator_n counter| ((state |baud_generator_s|)) (_ BitVec 4) (|baud_generator#5| state))
; yosys-smt2-assert 0 ../rtl/Tx/baud_generator.v:34
(define-fun |baud_generator_a 0| ((state |baud_generator_s|)) Bool (or (= ((_ extract 0 0) (|baud_generator#0| state)) #b1) (not (= ((_ extract 0 0) (|baud_generator#1| state)) #b1)))) ; $assert$../rtl/Tx/baud_generator.v:34$63
(define-fun |baud_generator#6| ((state |baud_generator_s|)) (_ BitVec 5) (bvadd (concat #b0 (|baud_generator#5| state)) #b00010)) ; { $0\ck_stb[0:0] $0\counter[3:0] }
(define-fun |baud_generator#7| ((state |baud_generator_s|)) (_ BitVec 3) (bvadd (|baud_generator#4| state) #b001)) ; $add$../rtl/Tx/baud_generator.v:31$59_Y
(define-fun |baud_generator#8| ((state |baud_generator_s|)) (_ BitVec 3) (ite (= ((_ extract 0 0) (|baud_generator#2| state)) #b1) #b000 (|baud_generator#7| state))) ; $0\cnt[2:0]
(define-fun |baud_generator#9| ((state |baud_generator_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|baud_generator#2| state)) #b1) #b1 #b0)) ; $0$formal$../rtl/Tx/baud_generator.v:34$53_EN[0:0]$58
(define-fun |baud_generator#10| ((state |baud_generator_s|)) Bool (bvuge (|baud_generator#4| state) #b110)) ; $ge$../rtl/Tx/baud_generator.v:34$60_Y
(define-fun |baud_generator#11| ((state |baud_generator_s|)) Bool (bvule (concat #b0 (|baud_generator#4| state)) #b1000)) ; $le$../rtl/Tx/baud_generator.v:34$61_Y
(define-fun |baud_generator#12| ((state |baud_generator_s|)) Bool (and (or  (|baud_generator#10| state) false) (or  (|baud_generator#11| state) false))) ; $0$formal$../rtl/Tx/baud_generator.v:34$53_CHECK[0:0]$57
(define-fun |baud_generator_a| ((state |baud_generator_s|)) Bool 
  (|baud_generator_a 0| state)
)
(define-fun |baud_generator_u| ((state |baud_generator_s|)) Bool true)
(define-fun |baud_generator_i| ((state |baud_generator_s|)) Bool (and
  (= (= ((_ extract 0 0) (|baud_generator#1| state)) #b1) false) ; $formal$../rtl/Tx/baud_generator.v:34$53_EN
  (= (|baud_generator#4| state) #b000) ; cnt
  (= (|baud_generator#5| state) #b0000) ; counter
))
(define-fun |baud_generator_h| ((state |baud_generator_s|)) Bool true)
(define-fun |baud_generator_t| ((state |baud_generator_s|) (next_state |baud_generator_s|)) Bool (and
  (= ((_ extract 3 0) (|baud_generator#6| state)) (|baud_generator#5| next_state)) ; $procdff$191 \counter
  (= (|baud_generator#8| state) (|baud_generator#4| next_state)) ; $procdff$187 \cnt
  (= ((_ extract 4 4) (|baud_generator#6| state)) (|baud_generator#2| next_state)) ; $procdff$190 \ck_stb
  (= (|baud_generator#9| state) (|baud_generator#1| next_state)) ; $procdff$189 $formal$../rtl/Tx/baud_generator.v:34$53_EN
  (= (ite (|baud_generator#12| state) #b1 #b0) (|baud_generator#0| next_state)) ; $procdff$188 $formal$../rtl/Tx/baud_generator.v:34$53_CHECK
)) ; end of module baud_generator
; yosys-smt2-module sampling_strobe_generator
(declare-sort |sampling_strobe_generator_s| 0)
(declare-fun |sampling_strobe_generator_is| (|sampling_strobe_generator_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |sampling_strobe_generator#0| (|sampling_strobe_generator_s|) Bool) ; \clk
(define-fun |sampling_strobe_generator_n clk| ((state |sampling_strobe_generator_s|)) Bool (|sampling_strobe_generator#0| state))
; yosys-smt2-register counter 3
; yosys-smt2-wire counter 3
(declare-fun |sampling_strobe_generator#1| (|sampling_strobe_generator_s|) (_ BitVec 3)) ; \counter
(define-fun |sampling_strobe_generator_n counter| ((state |sampling_strobe_generator_s|)) (_ BitVec 3) (|sampling_strobe_generator#1| state))
; yosys-smt2-output sampling_strobe 1
; yosys-smt2-register sampling_strobe 1
; yosys-smt2-wire sampling_strobe 1
(declare-fun |sampling_strobe_generator#2| (|sampling_strobe_generator_s|) (_ BitVec 1)) ; \sampling_strobe
(define-fun |sampling_strobe_generator_n sampling_strobe| ((state |sampling_strobe_generator_s|)) Bool (= ((_ extract 0 0) (|sampling_strobe_generator#2| state)) #b1))
; yosys-smt2-input start_detected 1
; yosys-smt2-wire start_detected 1
(declare-fun |sampling_strobe_generator#3| (|sampling_strobe_generator_s|) Bool) ; \start_detected
(define-fun |sampling_strobe_generator_n start_detected| ((state |sampling_strobe_generator_s|)) Bool (|sampling_strobe_generator#3| state))
(define-fun |sampling_strobe_generator#4| ((state |sampling_strobe_generator_s|)) Bool (= (|sampling_strobe_generator#1| state) #b111)) ; $eq$../rtl/Rx/sampling_strobe_generator.v:19$85_Y
(define-fun |sampling_strobe_generator#5| ((state |sampling_strobe_generator_s|)) (_ BitVec 1) (ite (|sampling_strobe_generator#4| state) #b1 #b0)) ; $0\sampling_strobe[0:0]
(define-fun |sampling_strobe_generator#6| ((state |sampling_strobe_generator_s|)) (_ BitVec 3) (bvadd (|sampling_strobe_generator#1| state) #b001)) ; $add$../rtl/Rx/sampling_strobe_generator.v:22$86_Y
(define-fun |sampling_strobe_generator#7| ((state |sampling_strobe_generator_s|)) (_ BitVec 3) (ite (|sampling_strobe_generator#4| state) #b000 (|sampling_strobe_generator#6| state))) ; $0\counter[2:0]
(define-fun |sampling_strobe_generator_a| ((state |sampling_strobe_generator_s|)) Bool true)
(define-fun |sampling_strobe_generator_u| ((state |sampling_strobe_generator_s|)) Bool true)
(define-fun |sampling_strobe_generator_i| ((state |sampling_strobe_generator_s|)) Bool 
  (= (= ((_ extract 0 0) (|sampling_strobe_generator#2| state)) #b1) false) ; sampling_strobe
)
(define-fun |sampling_strobe_generator_h| ((state |sampling_strobe_generator_s|)) Bool true)
(define-fun |sampling_strobe_generator_t| ((state |sampling_strobe_generator_s|) (next_state |sampling_strobe_generator_s|)) Bool (and
  (= (|sampling_strobe_generator#5| state) (|sampling_strobe_generator#2| next_state)) ; $procdff$178 \sampling_strobe
  (= (|sampling_strobe_generator#7| state) (|sampling_strobe_generator#1| next_state)) ; $procdff$179 \counter
)) ; end of module sampling_strobe_generator
; yosys-smt2-module detect_start_bit
(declare-sort |detect_start_bit_s| 0)
(declare-fun |detect_start_bit_is| (|detect_start_bit_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |detect_start_bit#0| (|detect_start_bit_s|) Bool) ; \clk
(define-fun |detect_start_bit_n clk| ((state |detect_start_bit_s|)) Bool (|detect_start_bit#0| state))
; yosys-smt2-register previously_idle 1
; yosys-smt2-wire previously_idle 1
(declare-fun |detect_start_bit#1| (|detect_start_bit_s|) (_ BitVec 1)) ; \previously_idle
(define-fun |detect_start_bit_n previously_idle| ((state |detect_start_bit_s|)) Bool (= ((_ extract 0 0) (|detect_start_bit#1| state)) #b1))
; yosys-smt2-input serial_in 1
; yosys-smt2-wire serial_in 1
(declare-fun |detect_start_bit#2| (|detect_start_bit_s|) Bool) ; \serial_in
(define-fun |detect_start_bit_n serial_in| ((state |detect_start_bit_s|)) Bool (|detect_start_bit#2| state))
; yosys-smt2-output start_detected 1
; yosys-smt2-register start_detected 1
; yosys-smt2-wire start_detected 1
(declare-fun |detect_start_bit#3| (|detect_start_bit_s|) (_ BitVec 1)) ; \start_detected
(define-fun |detect_start_bit_n start_detected| ((state |detect_start_bit_s|)) Bool (= ((_ extract 0 0) (|detect_start_bit#3| state)) #b1))
(define-fun |detect_start_bit#4| ((state |detect_start_bit_s|)) Bool (not (or  (|detect_start_bit#2| state) false))) ; $logic_not$../rtl/Rx/detect_start_bit.v:10$112_Y
(define-fun |detect_start_bit#5| ((state |detect_start_bit_s|)) Bool (and (or  (|detect_start_bit#4| state) false) (or  (= ((_ extract 0 0) (|detect_start_bit#1| state)) #b1) false))) ; $logic_and$../rtl/Rx/detect_start_bit.v:10$113_Y
(define-fun |detect_start_bit#6| ((state |detect_start_bit_s|)) Bool (not (or  (= ((_ extract 0 0) (|detect_start_bit#3| state)) #b1) false))) ; $logic_not$../rtl/Rx/detect_start_bit.v:10$114_Y
(define-fun |detect_start_bit#7| ((state |detect_start_bit_s|)) Bool (and (or  (|detect_start_bit#5| state) false) (or  (|detect_start_bit#6| state) false))) ; $logic_and$../rtl/Rx/detect_start_bit.v:10$115_Y
(define-fun |detect_start_bit#8| ((state |detect_start_bit_s|)) (_ BitVec 1) (ite (|detect_start_bit#7| state) #b1 #b0)) ; $0\start_detected[0:0]
(define-fun |detect_start_bit#9| ((state |detect_start_bit_s|)) (_ BitVec 1) (ite (|detect_start_bit#2| state) #b1 #b0)) ; $0\previously_idle[0:0]
(define-fun |detect_start_bit_a| ((state |detect_start_bit_s|)) Bool true)
(define-fun |detect_start_bit_u| ((state |detect_start_bit_s|)) Bool true)
(define-fun |detect_start_bit_i| ((state |detect_start_bit_s|)) Bool (and
  (= (= ((_ extract 0 0) (|detect_start_bit#1| state)) #b1) true) ; previously_idle
  (= (= ((_ extract 0 0) (|detect_start_bit#3| state)) #b1) false) ; start_detected
))
(define-fun |detect_start_bit_h| ((state |detect_start_bit_s|)) Bool true)
(define-fun |detect_start_bit_t| ((state |detect_start_bit_s|) (next_state |detect_start_bit_s|)) Bool (and
  (= (|detect_start_bit#8| state) (|detect_start_bit#3| next_state)) ; $procdff$183 \start_detected
  (= (|detect_start_bit#9| state) (|detect_start_bit#1| next_state)) ; $procdff$182 \previously_idle
)) ; end of module detect_start_bit
; yosys-smt2-module SIPO_shift_register
(declare-sort |SIPO_shift_register_s| 0)
(declare-fun |SIPO_shift_register_is| (|SIPO_shift_register_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |SIPO_shift_register#0| (|SIPO_shift_register_s|) Bool) ; \clk
(define-fun |SIPO_shift_register_n clk| ((state |SIPO_shift_register_s|)) Bool (|SIPO_shift_register#0| state))
; yosys-smt2-input data_is_available 1
; yosys-smt2-wire data_is_available 1
(declare-fun |SIPO_shift_register#1| (|SIPO_shift_register_s|) Bool) ; \data_is_available
(define-fun |SIPO_shift_register_n data_is_available| ((state |SIPO_shift_register_s|)) Bool (|SIPO_shift_register#1| state))
; yosys-smt2-output received_data 8
; yosys-smt2-register received_data 8
; yosys-smt2-wire received_data 8
(declare-fun |SIPO_shift_register#2| (|SIPO_shift_register_s|) (_ BitVec 8)) ; \received_data
(define-fun |SIPO_shift_register_n received_data| ((state |SIPO_shift_register_s|)) (_ BitVec 8) (|SIPO_shift_register#2| state))
; yosys-smt2-input serial_in 1
; yosys-smt2-wire serial_in 1
(declare-fun |SIPO_shift_register#3| (|SIPO_shift_register_s|) Bool) ; \serial_in
(define-fun |SIPO_shift_register_n serial_in| ((state |SIPO_shift_register_s|)) Bool (|SIPO_shift_register#3| state))
(define-fun |SIPO_shift_register#4| ((state |SIPO_shift_register_s|)) (_ BitVec 8) (ite (|SIPO_shift_register#1| state) (concat (ite (|SIPO_shift_register#3| state) #b1 #b0) ((_ extract 7 1) (|SIPO_shift_register#2| state))) (|SIPO_shift_register#2| state))) ; $0\received_data[7:0]
(define-fun |SIPO_shift_register_a| ((state |SIPO_shift_register_s|)) Bool true)
(define-fun |SIPO_shift_register_u| ((state |SIPO_shift_register_s|)) Bool true)
(define-fun |SIPO_shift_register_i| ((state |SIPO_shift_register_s|)) Bool true)
(define-fun |SIPO_shift_register_h| ((state |SIPO_shift_register_s|)) Bool true)
(define-fun |SIPO_shift_register_t| ((state |SIPO_shift_register_s|) (next_state |SIPO_shift_register_s|)) Bool 
  (= (|SIPO_shift_register#4| state) (|SIPO_shift_register#2| next_state)) ; $procdff$177 \received_data
) ; end of module SIPO_shift_register
; yosys-smt2-module rx_state
(declare-sort |rx_state_s| 0)
(declare-fun |rx_state_is| (|rx_state_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |rx_state#0| (|rx_state_s|) Bool) ; \clk
(define-fun |rx_state_n clk| ((state |rx_state_s|)) Bool (|rx_state#0| state))
; yosys-smt2-output data_is_available 1
; yosys-smt2-register data_is_available 1
; yosys-smt2-wire data_is_available 1
(declare-fun |rx_state#1| (|rx_state_s|) (_ BitVec 1)) ; \data_is_available
(define-fun |rx_state_n data_is_available| ((state |rx_state_s|)) Bool (= ((_ extract 0 0) (|rx_state#1| state)) #b1))
; yosys-smt2-output data_is_valid 1
; yosys-smt2-register data_is_valid 1
; yosys-smt2-wire data_is_valid 1
(declare-fun |rx_state#2| (|rx_state_s|) (_ BitVec 1)) ; \data_is_valid
(define-fun |rx_state_n data_is_valid| ((state |rx_state_s|)) Bool (= ((_ extract 0 0) (|rx_state#2| state)) #b1))
; yosys-smt2-output is_parity_stage 1
; yosys-smt2-register is_parity_stage 1
; yosys-smt2-wire is_parity_stage 1
(declare-fun |rx_state#3| (|rx_state_s|) (_ BitVec 1)) ; \is_parity_stage
(define-fun |rx_state_n is_parity_stage| ((state |rx_state_s|)) Bool (= ((_ extract 0 0) (|rx_state#3| state)) #b1))
; yosys-smt2-input sampling_strobe 1
; yosys-smt2-wire sampling_strobe 1
(declare-fun |rx_state#4| (|rx_state_s|) Bool) ; \sampling_strobe
(define-fun |rx_state_n sampling_strobe| ((state |rx_state_s|)) Bool (|rx_state#4| state))
; yosys-smt2-input start_detected 1
; yosys-smt2-wire start_detected 1
(declare-fun |rx_state#5| (|rx_state_s|) Bool) ; \start_detected
(define-fun |rx_state_n start_detected| ((state |rx_state_s|)) Bool (|rx_state#5| state))
; yosys-smt2-register state 4
; yosys-smt2-wire state 4
(declare-fun |rx_state#6| (|rx_state_s|) (_ BitVec 4)) ; \state
(define-fun |rx_state_n state| ((state |rx_state_s|)) (_ BitVec 4) (|rx_state#6| state))
(define-fun |rx_state#7| ((state |rx_state_s|)) (_ BitVec 4) (bvadd (|rx_state#6| state) #b0001)) ; $add$../rtl/Rx/rx_state.v:45$99_Y
(define-fun |rx_state#8| ((state |rx_state_s|)) (_ BitVec 1) (ite (|rx_state#5| state) #b1 #b0)) ; $auto$wreduce.cc:347:run$202 [0]
(define-fun |rx_state#9| ((state |rx_state_s|)) Bool (= (|rx_state#6| state) #b1010)) ; $0\is_parity_stage[0:0]
(define-fun |rx_state#10| ((state |rx_state_s|)) Bool (= (|rx_state#6| state) #b1001)) ; $procmux$157_CMP [7]
(define-fun |rx_state#11| ((state |rx_state_s|)) Bool (= (|rx_state#6| state) #b1000)) ; $procmux$157_CMP [6]
(define-fun |rx_state#12| ((state |rx_state_s|)) Bool (= (|rx_state#6| state) #b0111)) ; $procmux$157_CMP [5]
(define-fun |rx_state#13| ((state |rx_state_s|)) Bool (= (|rx_state#6| state) #b0110)) ; $procmux$157_CMP [4]
(define-fun |rx_state#14| ((state |rx_state_s|)) Bool (= (|rx_state#6| state) #b0101)) ; $procmux$157_CMP [3]
(define-fun |rx_state#15| ((state |rx_state_s|)) Bool (= (|rx_state#6| state) #b0100)) ; $procmux$157_CMP [2]
(define-fun |rx_state#16| ((state |rx_state_s|)) Bool (= (|rx_state#6| state) #b0011)) ; $procmux$157_CMP [1]
(define-fun |rx_state#17| ((state |rx_state_s|)) Bool (= (|rx_state#6| state) #b0010)) ; $procmux$157_CMP [0]
(define-fun |rx_state#18| ((state |rx_state_s|)) Bool (or  (|rx_state#10| state) (|rx_state#11| state) (|rx_state#12| state) (|rx_state#13| state) (|rx_state#14| state) (|rx_state#15| state) (|rx_state#16| state) (|rx_state#17| state))) ; $procmux$157_CTRL
(define-fun |rx_state#19| ((state |rx_state_s|)) Bool (= (|rx_state#6| state) #b0001)) ; $procmux$158_CMP
(define-fun |rx_state#20| ((state |rx_state_s|)) Bool (not (or  (= ((_ extract 0 0) (|rx_state#6| state)) #b1) (= ((_ extract 1 1) (|rx_state#6| state)) #b1) (= ((_ extract 2 2) (|rx_state#6| state)) #b1) (= ((_ extract 3 3) (|rx_state#6| state)) #b1)))) ; $procmux$159_CMP
(define-fun |rx_state#21| ((state |rx_state_s|)) (_ BitVec 4) (ite (|rx_state#20| state) (concat #b000 (|rx_state#8| state)) (ite (|rx_state#19| state) #b0010 (ite (|rx_state#18| state) (|rx_state#7| state) (ite (|rx_state#9| state) #b1011 #b0000))))) ; $procmux$155_Y
(define-fun |rx_state#22| ((state |rx_state_s|)) (_ BitVec 4) (ite (|rx_state#4| state) (|rx_state#21| state) (|rx_state#6| state))) ; $0\state[3:0]
(define-fun |rx_state#23| ((state |rx_state_s|)) Bool (= (|rx_state#6| state) #b1011)) ; $0\data_is_valid[0:0]
(define-fun |rx_state#24| ((state |rx_state_s|)) Bool (bvuge (|rx_state#6| state) #b0010)) ; $ge$../rtl/Rx/rx_state.v:27$94_Y
(define-fun |rx_state#25| ((state |rx_state_s|)) Bool (bvule (|rx_state#6| state) #b1001)) ; $le$../rtl/Rx/rx_state.v:27$95_Y
(define-fun |rx_state#26| ((state |rx_state_s|)) Bool (and (or  (|rx_state#24| state) false) (or  (|rx_state#25| state) false))) ; $0\data_is_available[0:0]
(define-fun |rx_state_a| ((state |rx_state_s|)) Bool true)
(define-fun |rx_state_u| ((state |rx_state_s|)) Bool true)
(define-fun |rx_state_i| ((state |rx_state_s|)) Bool (and
  (= (= ((_ extract 0 0) (|rx_state#1| state)) #b1) false) ; data_is_available
  (= (= ((_ extract 0 0) (|rx_state#2| state)) #b1) false) ; data_is_valid
  (= (= ((_ extract 0 0) (|rx_state#3| state)) #b1) false) ; is_parity_stage
  (= (|rx_state#6| state) #b0000) ; state
))
(define-fun |rx_state_h| ((state |rx_state_s|)) Bool true)
(define-fun |rx_state_t| ((state |rx_state_s|) (next_state |rx_state_s|)) Bool (and
  (= (|rx_state#22| state) (|rx_state#6| next_state)) ; $procdff$192 \state
  (= (ite (|rx_state#9| state) #b1 #b0) (|rx_state#3| next_state)) ; $procdff$195 \is_parity_stage
  (= (ite (|rx_state#23| state) #b1 #b0) (|rx_state#2| next_state)) ; $procdff$193 \data_is_valid
  (= (ite (|rx_state#26| state) #b1 #b0) (|rx_state#1| next_state)) ; $procdff$194 \data_is_available
)) ; end of module rx_state
; yosys-smt2-module check_parity
(declare-sort |check_parity_s| 0)
(declare-fun |check_parity_is| (|check_parity_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |check_parity#0| (|check_parity_s|) Bool) ; \clk
(define-fun |check_parity_n clk| ((state |check_parity_s|)) Bool (|check_parity#0| state))
; yosys-smt2-input data_is_valid 1
; yosys-smt2-wire data_is_valid 1
(declare-fun |check_parity#1| (|check_parity_s|) Bool) ; \data_is_valid
(define-fun |check_parity_n data_is_valid| ((state |check_parity_s|)) Bool (|check_parity#1| state))
; yosys-smt2-input is_parity_stage 1
; yosys-smt2-wire is_parity_stage 1
(declare-fun |check_parity#2| (|check_parity_s|) Bool) ; \is_parity_stage
(define-fun |check_parity_n is_parity_stage| ((state |check_parity_s|)) Bool (|check_parity#2| state))
; yosys-smt2-register parity_bit 1
; yosys-smt2-wire parity_bit 1
(declare-fun |check_parity#3| (|check_parity_s|) (_ BitVec 1)) ; \parity_bit
(define-fun |check_parity_n parity_bit| ((state |check_parity_s|)) Bool (= ((_ extract 0 0) (|check_parity#3| state)) #b1))
; yosys-smt2-register parity_value 1
; yosys-smt2-wire parity_value 1
(declare-fun |check_parity#4| (|check_parity_s|) (_ BitVec 1)) ; \parity_value
(define-fun |check_parity_n parity_value| ((state |check_parity_s|)) Bool (= ((_ extract 0 0) (|check_parity#4| state)) #b1))
; yosys-smt2-input received_data 8
; yosys-smt2-wire received_data 8
(declare-fun |check_parity#5| (|check_parity_s|) (_ BitVec 8)) ; \received_data
(define-fun |check_parity_n received_data| ((state |check_parity_s|)) (_ BitVec 8) (|check_parity#5| state))
; yosys-smt2-output rx_error 1
; yosys-smt2-register rx_error 1
; yosys-smt2-wire rx_error 1
(declare-fun |check_parity#6| (|check_parity_s|) (_ BitVec 1)) ; \rx_error
(define-fun |check_parity_n rx_error| ((state |check_parity_s|)) Bool (= ((_ extract 0 0) (|check_parity#6| state)) #b1))
; yosys-smt2-input serial_in 1
; yosys-smt2-wire serial_in 1
(declare-fun |check_parity#7| (|check_parity_s|) Bool) ; \serial_in
(define-fun |check_parity_n serial_in| ((state |check_parity_s|)) Bool (|check_parity#7| state))
(define-fun |check_parity#8| ((state |check_parity_s|)) Bool (distinct (|check_parity#3| state) (|check_parity#4| state))) ; $ne$../rtl/Rx/check_parity.v:23$108_Y
(define-fun |check_parity#9| ((state |check_parity_s|)) Bool (and (or  (|check_parity#1| state) false) (or  (|check_parity#8| state) false))) ; $logic_and$../rtl/Rx/check_parity.v:23$109_Y
(define-fun |check_parity#10| ((state |check_parity_s|)) (_ BitVec 1) (ite (|check_parity#9| state) #b1 (|check_parity#6| state))) ; $0\rx_error[0:0]
(define-fun |check_parity#11| ((state |check_parity_s|)) Bool (xor  (= ((_ extract 0 0) (|check_parity#5| state)) #b1) (= ((_ extract 1 1) (|check_parity#5| state)) #b1) (= ((_ extract 2 2) (|check_parity#5| state)) #b1) (= ((_ extract 3 3) (|check_parity#5| state)) #b1) (= ((_ extract 4 4) (|check_parity#5| state)) #b1) (= ((_ extract 5 5) (|check_parity#5| state)) #b1) (= ((_ extract 6 6) (|check_parity#5| state)) #b1) (= ((_ extract 7 7) (|check_parity#5| state)) #b1))) ; $0\parity_value[0:0]
(define-fun |check_parity#12| ((state |check_parity_s|)) (_ BitVec 1) (ite (|check_parity#2| state) (ite (|check_parity#7| state) #b1 #b0) (|check_parity#3| state))) ; $0\parity_bit[0:0]
(define-fun |check_parity_a| ((state |check_parity_s|)) Bool true)
(define-fun |check_parity_u| ((state |check_parity_s|)) Bool true)
(define-fun |check_parity_i| ((state |check_parity_s|)) Bool 
  (= (= ((_ extract 0 0) (|check_parity#6| state)) #b1) false) ; rx_error
)
(define-fun |check_parity_h| ((state |check_parity_s|)) Bool true)
(define-fun |check_parity_t| ((state |check_parity_s|) (next_state |check_parity_s|)) Bool (and
  (= (|check_parity#10| state) (|check_parity#6| next_state)) ; $procdff$184 \rx_error
  (= (ite (|check_parity#11| state) #b1 #b0) (|check_parity#4| next_state)) ; $procdff$186 \parity_value
  (= (|check_parity#12| state) (|check_parity#3| next_state)) ; $procdff$185 \parity_bit
)) ; end of module check_parity
; yosys-smt2-module Tx_top
(declare-sort |Tx_top_s| 0)
(declare-fun |Tx_top_is| (|Tx_top_s|) Bool)
; yosys-smt2-wire baud_clk 1
; yosys-smt2-cell baud_generator bg
(declare-fun |Tx_top#0| (|Tx_top_s|) Bool) ; \baud_clk
(declare-fun |Tx_top_h bg| (|Tx_top_s|) |baud_generator_s|)
(define-fun |Tx_top_n baud_clk| ((state |Tx_top_s|)) Bool (|Tx_top#0| state))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |Tx_top#1| (|Tx_top_s|) Bool) ; \clk
(define-fun |Tx_top_n clk| ((state |Tx_top_s|)) Bool (|Tx_top#1| state))
; yosys-smt2-input enable 1
; yosys-smt2-wire enable 1
(declare-fun |Tx_top#2| (|Tx_top_s|) Bool) ; \enable
(define-fun |Tx_top_n enable| ((state |Tx_top_s|)) Bool (|Tx_top#2| state))
; yosys-smt2-input i_data 8
; yosys-smt2-wire i_data 8
(declare-fun |Tx_top#3| (|Tx_top_s|) (_ BitVec 8)) ; \i_data
(define-fun |Tx_top_n i_data| ((state |Tx_top_s|)) (_ BitVec 8) (|Tx_top#3| state))
; yosys-smt2-output o_busy 1
; yosys-smt2-wire o_busy 1
; yosys-smt2-cell TxUART tx
(declare-fun |Tx_top#4| (|Tx_top_s|) Bool) ; \o_busy
(declare-fun |Tx_top#5| (|Tx_top_s|) Bool) ; \serial_out
(declare-fun |Tx_top_h tx| (|Tx_top_s|) |TxUART_s|)
(define-fun |Tx_top_n o_busy| ((state |Tx_top_s|)) Bool (|Tx_top#4| state))
; yosys-smt2-wire parity_bit 1
(define-fun |Tx_top#6| ((state |Tx_top_s|)) Bool (xor  (= ((_ extract 0 0) (|Tx_top#3| state)) #b1) (= ((_ extract 1 1) (|Tx_top#3| state)) #b1) (= ((_ extract 2 2) (|Tx_top#3| state)) #b1) (= ((_ extract 3 3) (|Tx_top#3| state)) #b1) (= ((_ extract 4 4) (|Tx_top#3| state)) #b1) (= ((_ extract 5 5) (|Tx_top#3| state)) #b1) (= ((_ extract 6 6) (|Tx_top#3| state)) #b1) (= ((_ extract 7 7) (|Tx_top#3| state)) #b1))) ; \parity_bit
(define-fun |Tx_top_n parity_bit| ((state |Tx_top_s|)) Bool (|Tx_top#6| state))
; yosys-smt2-output serial_out 1
; yosys-smt2-wire serial_out 1
(define-fun |Tx_top_n serial_out| ((state |Tx_top_s|)) Bool (|Tx_top#5| state))
(define-fun |Tx_top_a| ((state |Tx_top_s|)) Bool (and
  (|TxUART_a| (|Tx_top_h tx| state))
  (|baud_generator_a| (|Tx_top_h bg| state))
))
(define-fun |Tx_top_u| ((state |Tx_top_s|)) Bool (and
  (|TxUART_u| (|Tx_top_h tx| state))
  (|baud_generator_u| (|Tx_top_h bg| state))
))
(define-fun |Tx_top_i| ((state |Tx_top_s|)) Bool (and
  (|TxUART_i| (|Tx_top_h tx| state))
  (|baud_generator_i| (|Tx_top_h bg| state))
))
(define-fun |Tx_top_h| ((state |Tx_top_s|)) Bool (and
  (= (|Tx_top_is| state) (|TxUART_is| (|Tx_top_h tx| state)))
  (= (|Tx_top#0| state) (|TxUART_n baud_clk| (|Tx_top_h tx| state))) ; TxUART.baud_clk
  (= (|Tx_top#1| state) (|TxUART_n clk| (|Tx_top_h tx| state))) ; TxUART.clk
  (= (|Tx_top#2| state) (|TxUART_n enable| (|Tx_top_h tx| state))) ; TxUART.enable
  (= (concat (ite (|Tx_top#6| state) #b1 #b0) (|Tx_top#3| state)) (|TxUART_n i_data| (|Tx_top_h tx| state))) ; TxUART.i_data
  (= (|Tx_top#4| state) (|TxUART_n o_busy| (|Tx_top_h tx| state))) ; TxUART.o_busy
  (= (|Tx_top#5| state) (|TxUART_n serial_out| (|Tx_top_h tx| state))) ; TxUART.serial_out
  (= (|Tx_top_is| state) (|baud_generator_is| (|Tx_top_h bg| state)))
  (= (|Tx_top#0| state) (|baud_generator_n baud_clk| (|Tx_top_h bg| state))) ; baud_generator.baud_clk
  (= (|Tx_top#1| state) (|baud_generator_n clk| (|Tx_top_h bg| state))) ; baud_generator.clk
  (|TxUART_h| (|Tx_top_h tx| state))
  (|baud_generator_h| (|Tx_top_h bg| state))
))
(define-fun |Tx_top_t| ((state |Tx_top_s|) (next_state |Tx_top_s|)) Bool (and
  (|TxUART_t| (|Tx_top_h tx| state) (|Tx_top_h tx| next_state))
  (|baud_generator_t| (|Tx_top_h bg| state) (|Tx_top_h bg| next_state))
)) ; end of module Tx_top
; yosys-smt2-module RxUART
(declare-sort |RxUART_s| 0)
(declare-fun |RxUART_is| (|RxUART_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |RxUART#0| (|RxUART_s|) Bool) ; \clk
(define-fun |RxUART_n clk| ((state |RxUART_s|)) Bool (|RxUART#0| state))
; yosys-smt2-output data_is_available 1
; yosys-smt2-wire data_is_available 1
; yosys-smt2-cell rx_state state
(declare-fun |RxUART#1| (|RxUART_s|) Bool) ; \data_is_available
(declare-fun |RxUART#2| (|RxUART_s|) Bool) ; \data_is_valid
(declare-fun |RxUART#3| (|RxUART_s|) Bool) ; \is_parity_stage
(declare-fun |RxUART_h state| (|RxUART_s|) |rx_state_s|)
(define-fun |RxUART_n data_is_available| ((state |RxUART_s|)) Bool (|RxUART#1| state))
; yosys-smt2-output data_is_valid 1
; yosys-smt2-wire data_is_valid 1
(define-fun |RxUART_n data_is_valid| ((state |RxUART_s|)) Bool (|RxUART#2| state))
; yosys-smt2-wire is_parity_stage 1
(define-fun |RxUART_n is_parity_stage| ((state |RxUART_s|)) Bool (|RxUART#3| state))
; yosys-smt2-wire sampling_strobe 1
; yosys-smt2-cell sampling_strobe_generator ssg
(declare-fun |RxUART#4| (|RxUART_s|) Bool) ; \sampling_strobe
(declare-fun |RxUART_h ssg| (|RxUART_s|) |sampling_strobe_generator_s|)
(define-fun |RxUART_n sampling_strobe| ((state |RxUART_s|)) Bool (|RxUART#4| state))
; yosys-smt2-input serial_in 1
; yosys-smt2-wire serial_in 1
(declare-fun |RxUART#5| (|RxUART_s|) Bool) ; \serial_in
(define-fun |RxUART_n serial_in| ((state |RxUART_s|)) Bool (|RxUART#5| state))
; yosys-smt2-wire start_detected 1
; yosys-smt2-cell detect_start_bit dsb
(declare-fun |RxUART#6| (|RxUART_s|) Bool) ; \start_detected
(declare-fun |RxUART_h dsb| (|RxUART_s|) |detect_start_bit_s|)
(define-fun |RxUART_n start_detected| ((state |RxUART_s|)) Bool (|RxUART#6| state))
; yosys-smt2-cover 0 ../rtl/Rx/RxUART.v:22
(define-fun |RxUART_c 0| ((state |RxUART_s|)) Bool (and (|RxUART#2| state) true)) ; $cover$../rtl/Rx/RxUART.v:22$83
(define-fun |RxUART_a| ((state |RxUART_s|)) Bool (and
  (|sampling_strobe_generator_a| (|RxUART_h ssg| state))
  (|detect_start_bit_a| (|RxUART_h dsb| state))
  (|rx_state_a| (|RxUART_h state| state))
))
(define-fun |RxUART_u| ((state |RxUART_s|)) Bool (and
  (|sampling_strobe_generator_u| (|RxUART_h ssg| state))
  (|detect_start_bit_u| (|RxUART_h dsb| state))
  (|rx_state_u| (|RxUART_h state| state))
))
(define-fun |RxUART_i| ((state |RxUART_s|)) Bool (and
  (|sampling_strobe_generator_i| (|RxUART_h ssg| state))
  (|detect_start_bit_i| (|RxUART_h dsb| state))
  (|rx_state_i| (|RxUART_h state| state))
))
(define-fun |RxUART_h| ((state |RxUART_s|)) Bool (and
  (= (|RxUART_is| state) (|sampling_strobe_generator_is| (|RxUART_h ssg| state)))
  (= (|RxUART#0| state) (|sampling_strobe_generator_n clk| (|RxUART_h ssg| state))) ; sampling_strobe_generator.clk
  (= (|RxUART#4| state) (|sampling_strobe_generator_n sampling_strobe| (|RxUART_h ssg| state))) ; sampling_strobe_generator.sampling_strobe
  (= (|RxUART#6| state) (|sampling_strobe_generator_n start_detected| (|RxUART_h ssg| state))) ; sampling_strobe_generator.start_detected
  (= (|RxUART_is| state) (|detect_start_bit_is| (|RxUART_h dsb| state)))
  (= (|RxUART#0| state) (|detect_start_bit_n clk| (|RxUART_h dsb| state))) ; detect_start_bit.clk
  (= (|RxUART#5| state) (|detect_start_bit_n serial_in| (|RxUART_h dsb| state))) ; detect_start_bit.serial_in
  (= (|RxUART#6| state) (|detect_start_bit_n start_detected| (|RxUART_h dsb| state))) ; detect_start_bit.start_detected
  (= (|RxUART_is| state) (|rx_state_is| (|RxUART_h state| state)))
  (= (|RxUART#0| state) (|rx_state_n clk| (|RxUART_h state| state))) ; rx_state.clk
  (= (|RxUART#1| state) (|rx_state_n data_is_available| (|RxUART_h state| state))) ; rx_state.data_is_available
  (= (|RxUART#2| state) (|rx_state_n data_is_valid| (|RxUART_h state| state))) ; rx_state.data_is_valid
  (= (|RxUART#3| state) (|rx_state_n is_parity_stage| (|RxUART_h state| state))) ; rx_state.is_parity_stage
  (= (|RxUART#4| state) (|rx_state_n sampling_strobe| (|RxUART_h state| state))) ; rx_state.sampling_strobe
  (= (|RxUART#6| state) (|rx_state_n start_detected| (|RxUART_h state| state))) ; rx_state.start_detected
  (|sampling_strobe_generator_h| (|RxUART_h ssg| state))
  (|detect_start_bit_h| (|RxUART_h dsb| state))
  (|rx_state_h| (|RxUART_h state| state))
))
(define-fun |RxUART_t| ((state |RxUART_s|) (next_state |RxUART_s|)) Bool (and
  (|sampling_strobe_generator_t| (|RxUART_h ssg| state) (|RxUART_h ssg| next_state))
  (|detect_start_bit_t| (|RxUART_h dsb| state) (|RxUART_h dsb| next_state))
  (|rx_state_t| (|RxUART_h state| state) (|RxUART_h state| next_state))
)) ; end of module RxUART
; yosys-smt2-module Rx_top
(declare-sort |Rx_top_s| 0)
(declare-fun |Rx_top_is| (|Rx_top_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |Rx_top#0| (|Rx_top_s|) Bool) ; \clk
(define-fun |Rx_top_n clk| ((state |Rx_top_s|)) Bool (|Rx_top#0| state))
; yosys-smt2-wire data_is_available 1
; yosys-smt2-cell RxUART rx
(declare-fun |Rx_top#1| (|Rx_top_s|) Bool) ; \data_is_available
(declare-fun |Rx_top#2| (|Rx_top_s|) Bool) ; \data_is_valid
(declare-fun |Rx_top_h rx| (|Rx_top_s|) |RxUART_s|)
(define-fun |Rx_top_n data_is_available| ((state |Rx_top_s|)) Bool (|Rx_top#1| state))
; yosys-smt2-output data_is_valid 1
; yosys-smt2-wire data_is_valid 1
(define-fun |Rx_top_n data_is_valid| ((state |Rx_top_s|)) Bool (|Rx_top#2| state))
; yosys-smt2-output received_data 8
; yosys-smt2-wire received_data 8
; yosys-smt2-cell SIPO_shift_register SIPO
(declare-fun |Rx_top#3| (|Rx_top_s|) (_ BitVec 8)) ; \received_data
(declare-fun |Rx_top_h SIPO| (|Rx_top_s|) |SIPO_shift_register_s|)
(define-fun |Rx_top_n received_data| ((state |Rx_top_s|)) (_ BitVec 8) (|Rx_top#3| state))
; yosys-smt2-output rx_error 1
; yosys-smt2-wire rx_error 1
; yosys-smt2-cell check_parity cp
(declare-fun |Rx_top#4| (|Rx_top_s|) Bool) ; \rx_error
(declare-fun |Rx_top_h cp| (|Rx_top_s|) |check_parity_s|)
(define-fun |Rx_top_n rx_error| ((state |Rx_top_s|)) Bool (|Rx_top#4| state))
; yosys-smt2-input serial_in 1
; yosys-smt2-wire serial_in 1
(declare-fun |Rx_top#5| (|Rx_top_s|) Bool) ; \serial_in
(define-fun |Rx_top_n serial_in| ((state |Rx_top_s|)) Bool (|Rx_top#5| state))
; yosys-smt2-wire serial_in_synced 1
; yosys-smt2-cell synchronizer sync
(declare-fun |Rx_top#6| (|Rx_top_s|) Bool) ; \serial_in_synced
(declare-fun |Rx_top_h sync| (|Rx_top_s|) |synchronizer_s|)
(define-fun |Rx_top_n serial_in_synced| ((state |Rx_top_s|)) Bool (|Rx_top#6| state))
(define-fun |Rx_top_a| ((state |Rx_top_s|)) Bool (and
  (|RxUART_a| (|Rx_top_h rx| state))
  (|synchronizer_a| (|Rx_top_h sync| state))
  (|SIPO_shift_register_a| (|Rx_top_h SIPO| state))
  (|check_parity_a| (|Rx_top_h cp| state))
))
(define-fun |Rx_top_u| ((state |Rx_top_s|)) Bool (and
  (|RxUART_u| (|Rx_top_h rx| state))
  (|synchronizer_u| (|Rx_top_h sync| state))
  (|SIPO_shift_register_u| (|Rx_top_h SIPO| state))
  (|check_parity_u| (|Rx_top_h cp| state))
))
(define-fun |Rx_top_i| ((state |Rx_top_s|)) Bool (and
  (|RxUART_i| (|Rx_top_h rx| state))
  (|synchronizer_i| (|Rx_top_h sync| state))
  (|SIPO_shift_register_i| (|Rx_top_h SIPO| state))
  (|check_parity_i| (|Rx_top_h cp| state))
))
(define-fun |Rx_top_h| ((state |Rx_top_s|)) Bool (and
  (= (|Rx_top_is| state) (|RxUART_is| (|Rx_top_h rx| state)))
  (= (|Rx_top#0| state) (|RxUART_n clk| (|Rx_top_h rx| state))) ; RxUART.clk
  (= (|Rx_top#1| state) (|RxUART_n data_is_available| (|Rx_top_h rx| state))) ; RxUART.data_is_available
  (= (|Rx_top#2| state) (|RxUART_n data_is_valid| (|Rx_top_h rx| state))) ; RxUART.data_is_valid
  (= (|Rx_top#6| state) (|RxUART_n serial_in| (|Rx_top_h rx| state))) ; RxUART.serial_in
  (= (|Rx_top_is| state) (|synchronizer_is| (|Rx_top_h sync| state)))
  (= (|Rx_top#0| state) (|synchronizer_n clk| (|Rx_top_h sync| state))) ; synchronizer.clk
  (= (|Rx_top#5| state) (|synchronizer_n serial_in| (|Rx_top_h sync| state))) ; synchronizer.serial_in
  (= (|Rx_top#6| state) (|synchronizer_n serial_in_synced| (|Rx_top_h sync| state))) ; synchronizer.serial_in_synced
  (= (|Rx_top_is| state) (|SIPO_shift_register_is| (|Rx_top_h SIPO| state)))
  (= (|Rx_top#0| state) (|SIPO_shift_register_n clk| (|Rx_top_h SIPO| state))) ; SIPO_shift_register.clk
  (= (|Rx_top#1| state) (|SIPO_shift_register_n data_is_available| (|Rx_top_h SIPO| state))) ; SIPO_shift_register.data_is_available
  (= (|Rx_top#3| state) (|SIPO_shift_register_n received_data| (|Rx_top_h SIPO| state))) ; SIPO_shift_register.received_data
  (= (|Rx_top#6| state) (|SIPO_shift_register_n serial_in| (|Rx_top_h SIPO| state))) ; SIPO_shift_register.serial_in
  (= (|Rx_top_is| state) (|check_parity_is| (|Rx_top_h cp| state)))
  (= (|Rx_top#0| state) (|check_parity_n clk| (|Rx_top_h cp| state))) ; check_parity.clk
  (= (|Rx_top#2| state) (|check_parity_n data_is_valid| (|Rx_top_h cp| state))) ; check_parity.data_is_valid
  (= (|Rx_top#4| state) (|check_parity_n rx_error| (|Rx_top_h cp| state))) ; check_parity.rx_error
  (= (|Rx_top#6| state) (|check_parity_n serial_in| (|Rx_top_h cp| state))) ; check_parity.serial_in
  (|RxUART_h| (|Rx_top_h rx| state))
  (|synchronizer_h| (|Rx_top_h sync| state))
  (|SIPO_shift_register_h| (|Rx_top_h SIPO| state))
  (|check_parity_h| (|Rx_top_h cp| state))
))
(define-fun |Rx_top_t| ((state |Rx_top_s|) (next_state |Rx_top_s|)) Bool (and
  (|RxUART_t| (|Rx_top_h rx| state) (|Rx_top_h rx| next_state))
  (|synchronizer_t| (|Rx_top_h sync| state) (|Rx_top_h sync| next_state))
  (|SIPO_shift_register_t| (|Rx_top_h SIPO| state) (|Rx_top_h SIPO| next_state))
  (|check_parity_t| (|Rx_top_h cp| state) (|Rx_top_h cp| next_state))
)) ; end of module Rx_top
; yosys-smt2-module UART
(declare-sort |UART_s| 0)
(declare-fun |UART_is| (|UART_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |UART#0| (|UART_s|) Bool) ; \clk
(define-fun |UART_n clk| ((state |UART_s|)) Bool (|UART#0| state))
; yosys-smt2-output data_is_valid 1
; yosys-smt2-wire data_is_valid 1
; yosys-smt2-cell Rx_top rx
(declare-fun |UART#1| (|UART_s|) Bool) ; \data_is_valid
(declare-fun |UART#2| (|UART_s|) (_ BitVec 8)) ; \received_data
(declare-fun |UART#3| (|UART_s|) Bool) ; \rx_error
(declare-fun |UART_h rx| (|UART_s|) |Rx_top_s|)
(define-fun |UART_n data_is_valid| ((state |UART_s|)) Bool (|UART#1| state))
; yosys-smt2-input enable 1
; yosys-smt2-wire enable 1
(declare-fun |UART#4| (|UART_s|) Bool) ; \enable
(define-fun |UART_n enable| ((state |UART_s|)) Bool (|UART#4| state))
; yosys-smt2-input i_data 8
; yosys-smt2-wire i_data 8
(declare-fun |UART#5| (|UART_s|) (_ BitVec 8)) ; \i_data
(define-fun |UART_n i_data| ((state |UART_s|)) (_ BitVec 8) (|UART#5| state))
; yosys-smt2-output o_busy 1
; yosys-smt2-wire o_busy 1
; yosys-smt2-cell Tx_top tx
(declare-fun |UART#6| (|UART_s|) Bool) ; \o_busy
(declare-fun |UART#7| (|UART_s|) Bool) ; \serial_out
(declare-fun |UART_h tx| (|UART_s|) |Tx_top_s|)
(define-fun |UART_n o_busy| ((state |UART_s|)) Bool (|UART#6| state))
; yosys-smt2-output received_data 8
; yosys-smt2-wire received_data 8
(define-fun |UART_n received_data| ((state |UART_s|)) (_ BitVec 8) (|UART#2| state))
; yosys-smt2-output rx_error 1
; yosys-smt2-wire rx_error 1
(define-fun |UART_n rx_error| ((state |UART_s|)) Bool (|UART#3| state))
; yosys-smt2-input serial_in 1
; yosys-smt2-wire serial_in 1
(declare-fun |UART#8| (|UART_s|) Bool) ; \serial_in
(define-fun |UART_n serial_in| ((state |UART_s|)) Bool (|UART#8| state))
; yosys-smt2-output serial_out 1
; yosys-smt2-wire serial_out 1
(define-fun |UART_n serial_out| ((state |UART_s|)) Bool (|UART#7| state))
(define-fun |UART_a| ((state |UART_s|)) Bool (and
  (|Rx_top_a| (|UART_h rx| state))
  (|Tx_top_a| (|UART_h tx| state))
))
(define-fun |UART_u| ((state |UART_s|)) Bool (and
  (|Rx_top_u| (|UART_h rx| state))
  (|Tx_top_u| (|UART_h tx| state))
))
(define-fun |UART_i| ((state |UART_s|)) Bool (and
  (|Rx_top_i| (|UART_h rx| state))
  (|Tx_top_i| (|UART_h tx| state))
))
(define-fun |UART_h| ((state |UART_s|)) Bool (and
  (= (|UART_is| state) (|Rx_top_is| (|UART_h rx| state)))
  (= (|UART#0| state) (|Rx_top_n clk| (|UART_h rx| state))) ; Rx_top.clk
  (= (|UART#1| state) (|Rx_top_n data_is_valid| (|UART_h rx| state))) ; Rx_top.data_is_valid
  (= (|UART#2| state) (|Rx_top_n received_data| (|UART_h rx| state))) ; Rx_top.received_data
  (= (|UART#3| state) (|Rx_top_n rx_error| (|UART_h rx| state))) ; Rx_top.rx_error
  (= (|UART#8| state) (|Rx_top_n serial_in| (|UART_h rx| state))) ; Rx_top.serial_in
  (= (|UART_is| state) (|Tx_top_is| (|UART_h tx| state)))
  (= (|UART#0| state) (|Tx_top_n clk| (|UART_h tx| state))) ; Tx_top.clk
  (= (|UART#4| state) (|Tx_top_n enable| (|UART_h tx| state))) ; Tx_top.enable
  (= (|UART#5| state) (|Tx_top_n i_data| (|UART_h tx| state))) ; Tx_top.i_data
  (= (|UART#6| state) (|Tx_top_n o_busy| (|UART_h tx| state))) ; Tx_top.o_busy
  (= (|UART#7| state) (|Tx_top_n serial_out| (|UART_h tx| state))) ; Tx_top.serial_out
  (|Rx_top_h| (|UART_h rx| state))
  (|Tx_top_h| (|UART_h tx| state))
))
(define-fun |UART_t| ((state |UART_s|) (next_state |UART_s|)) Bool (and
  (|Rx_top_t| (|UART_h rx| state) (|UART_h rx| next_state))
  (|Tx_top_t| (|UART_h tx| state) (|UART_h tx| next_state))
)) ; end of module UART
; yosys-smt2-module test_UART
(declare-sort |test_UART_s| 0)
(declare-fun |test_UART_is| (|test_UART_s|) Bool)
; yosys-smt2-register $formal$../rtl/test_UART.v:30$5_CHECK 1
(declare-fun |test_UART#0| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:30$5_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:30$5_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#0| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:30$5_EN 1
(declare-fun |test_UART#1| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:30$5_EN
(define-fun |test_UART_n $formal$../rtl/test_UART.v:30$5_EN| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#1| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:33$6_CHECK 1
(declare-fun |test_UART#2| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:33$6_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:33$6_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#2| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:33$6_EN 1
(declare-fun |test_UART#3| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:33$6_EN
(define-fun |test_UART_n $formal$../rtl/test_UART.v:33$6_EN| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#3| state)) #b1))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |test_UART#4| (|test_UART_s|) Bool) ; \clk
(define-fun |test_UART_n clk| ((state |test_UART_s|)) Bool (|test_UART#4| state))
; yosys-smt2-output data_is_valid 1
; yosys-smt2-wire data_is_valid 1
; yosys-smt2-cell UART uart
(declare-fun |test_UART#5| (|test_UART_s|) Bool) ; \data_is_valid
(declare-fun |test_UART#6| (|test_UART_s|) Bool) ; \o_busy
(declare-fun |test_UART#7| (|test_UART_s|) (_ BitVec 8)) ; \received_data
(declare-fun |test_UART#8| (|test_UART_s|) Bool) ; \rx_error
(declare-fun |test_UART#9| (|test_UART_s|) Bool) ; \serial_out
(declare-fun |test_UART_h uart| (|test_UART_s|) |UART_s|)
(define-fun |test_UART_n data_is_valid| ((state |test_UART_s|)) Bool (|test_UART#5| state))
; yosys-smt2-input enable 1
; yosys-smt2-wire enable 1
(declare-fun |test_UART#10| (|test_UART_s|) Bool) ; \enable
(define-fun |test_UART_n enable| ((state |test_UART_s|)) Bool (|test_UART#10| state))
; yosys-smt2-input i_data 8
; yosys-smt2-wire i_data 8
(declare-fun |test_UART#11| (|test_UART_s|) (_ BitVec 8)) ; \i_data
(define-fun |test_UART_n i_data| ((state |test_UART_s|)) (_ BitVec 8) (|test_UART#11| state))
; yosys-smt2-output o_busy 1
; yosys-smt2-wire o_busy 1
(define-fun |test_UART_n o_busy| ((state |test_UART_s|)) Bool (|test_UART#6| state))
; yosys-smt2-output received_data 8
; yosys-smt2-wire received_data 8
(define-fun |test_UART_n received_data| ((state |test_UART_s|)) (_ BitVec 8) (|test_UART#7| state))
; yosys-smt2-output rx_error 1
; yosys-smt2-wire rx_error 1
(define-fun |test_UART_n rx_error| ((state |test_UART_s|)) Bool (|test_UART#8| state))
; yosys-smt2-wire serial_in 1
(define-fun |test_UART_n serial_in| ((state |test_UART_s|)) Bool (|test_UART#9| state))
; yosys-smt2-output serial_out 1
; yosys-smt2-wire serial_out 1
(define-fun |test_UART_n serial_out| ((state |test_UART_s|)) Bool (|test_UART#9| state))
; yosys-smt2-assert 0 ../rtl/test_UART.v:30
(define-fun |test_UART_a 0| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#0| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#1| state)) #b1)))) ; $assert$../rtl/test_UART.v:30$16
; yosys-smt2-assert 1 ../rtl/test_UART.v:33
(define-fun |test_UART_a 1| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#2| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#3| state)) #b1)))) ; $assert$../rtl/test_UART.v:33$17
(define-fun |test_UART#12| ((state |test_UART_s|)) (_ BitVec 1) (bvnot (ite (|test_UART#4| state) #b1 #b0))) ; $0$formal$../rtl/test_UART.v:25$1_CHECK[0:0]$19
(define-fun |test_UART#13| ((state |test_UART_s|)) Bool (|test_UART_is| state)) ; $0$formal$../rtl/test_UART.v:25$1_EN[0:0]$20
; yosys-smt2-assume 0 ../rtl/test_UART.v:25
(define-fun |test_UART_u 0| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#12| state)) #b1) (not (|test_UART#13| state)))) ; $assume$../rtl/test_UART.v:25$14
(define-fun |test_UART#14| ((state |test_UART_s|)) (_ BitVec 1) (bvnot (ite (|test_UART#10| state) #b1 #b0))) ; $0$formal$../rtl/test_UART.v:26$3_CHECK[0:0]$23
; yosys-smt2-assume 1 ../rtl/test_UART.v:26
(define-fun |test_UART_u 1| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#14| state)) #b1) (not (|test_UART#13| state)))) ; $assume$../rtl/test_UART.v:26$15
(define-fun |test_UART#15| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#5| state) #b1 #b0)) ; $0$formal$../rtl/test_UART.v:33$6_EN[0:0]$11
(define-fun |test_UART#16| ((state |test_UART_s|)) Bool (= (|test_UART#7| state) (|test_UART#11| state))) ; $0$formal$../rtl/test_UART.v:33$6_CHECK[0:0]$10
(define-fun |test_UART#17| ((state |test_UART_s|)) Bool (not (or  (|test_UART#8| state) false))) ; $0$formal$../rtl/test_UART.v:30$5_CHECK[0:0]$8
(define-fun |test_UART_a| ((state |test_UART_s|)) Bool (and
  (|test_UART_a 0| state)
  (|test_UART_a 1| state)
  (|UART_a| (|test_UART_h uart| state))
))
(define-fun |test_UART_u| ((state |test_UART_s|)) Bool (and
  (|test_UART_u 0| state)
  (|test_UART_u 1| state)
  (|UART_u| (|test_UART_h uart| state))
))
(define-fun |test_UART_i| ((state |test_UART_s|)) Bool (and
  (= (= ((_ extract 0 0) (|test_UART#1| state)) #b1) false) ; $formal$../rtl/test_UART.v:30$5_EN
  (= (= ((_ extract 0 0) (|test_UART#3| state)) #b1) false) ; $formal$../rtl/test_UART.v:33$6_EN
  (|UART_i| (|test_UART_h uart| state))
))
(define-fun |test_UART_h| ((state |test_UART_s|)) Bool (and
  (= (|test_UART_is| state) (|UART_is| (|test_UART_h uart| state)))
  (= (|test_UART#4| state) (|UART_n clk| (|test_UART_h uart| state))) ; UART.clk
  (= (|test_UART#5| state) (|UART_n data_is_valid| (|test_UART_h uart| state))) ; UART.data_is_valid
  (= (|test_UART#10| state) (|UART_n enable| (|test_UART_h uart| state))) ; UART.enable
  (= (|test_UART#11| state) (|UART_n i_data| (|test_UART_h uart| state))) ; UART.i_data
  (= (|test_UART#6| state) (|UART_n o_busy| (|test_UART_h uart| state))) ; UART.o_busy
  (= (|test_UART#7| state) (|UART_n received_data| (|test_UART_h uart| state))) ; UART.received_data
  (= (|test_UART#8| state) (|UART_n rx_error| (|test_UART_h uart| state))) ; UART.rx_error
  (= (|test_UART#9| state) (|UART_n serial_in| (|test_UART_h uart| state))) ; UART.serial_in
  (= (|test_UART#9| state) (|UART_n serial_out| (|test_UART_h uart| state))) ; UART.serial_out
  (|UART_h| (|test_UART_h uart| state))
))
(define-fun |test_UART_t| ((state |test_UART_s|) (next_state |test_UART_s|)) Bool (and
  (= (|test_UART#15| state) (|test_UART#3| next_state)) ; $procdff$200 $formal$../rtl/test_UART.v:33$6_EN
  (= (ite (|test_UART#16| state) #b1 #b0) (|test_UART#2| next_state)) ; $procdff$199 $formal$../rtl/test_UART.v:33$6_CHECK
  (= #b1 (|test_UART#1| next_state)) ; $procdff$198 $formal$../rtl/test_UART.v:30$5_EN
  (= (ite (|test_UART#17| state) #b1 #b0) (|test_UART#0| next_state)) ; $procdff$197 $formal$../rtl/test_UART.v:30$5_CHECK
  (|UART_t| (|test_UART_h uart| state) (|test_UART_h uart| next_state))
)) ; end of module test_UART
; yosys-smt2-topmod test_UART
; end of yosys output
