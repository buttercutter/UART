; SMT-LIBv2 description generated by Yosys 0.7+386 (git sha1 ca2adc30, gcc 7.2.1 -march=x86-64 -mtune=generic -O2 -fstack-protector-strong -fPIC -Os)
; yosys-smt2-module baud_generator
(declare-sort |baud_generator_s| 0)
(declare-fun |baud_generator_is| (|baud_generator_s|) Bool)
; yosys-smt2-output baud_clk 1
; yosys-smt2-wire baud_clk 1
(declare-fun |baud_generator#0| (|baud_generator_s|) (_ BitVec 1)) ; \ck_stb
(define-fun |baud_generator_n baud_clk| ((state |baud_generator_s|)) Bool (= ((_ extract 0 0) (|baud_generator#0| state)) #b1))
; yosys-smt2-register ck_stb 1
; yosys-smt2-wire ck_stb 1
(define-fun |baud_generator_n ck_stb| ((state |baud_generator_s|)) Bool (= ((_ extract 0 0) (|baud_generator#0| state)) #b1))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |baud_generator#1| (|baud_generator_s|) Bool) ; \clk
(define-fun |baud_generator_n clk| ((state |baud_generator_s|)) Bool (|baud_generator#1| state))
; yosys-smt2-register cnt 3
; yosys-smt2-wire cnt 3
(declare-fun |baud_generator#2| (|baud_generator_s|) (_ BitVec 3)) ; \cnt
(define-fun |baud_generator_n cnt| ((state |baud_generator_s|)) (_ BitVec 3) (|baud_generator#2| state))
(define-fun |baud_generator#3| ((state |baud_generator_s|)) (_ BitVec 3) (bvadd (|baud_generator#2| state) #b001)) ; $0\cnt[2:0]
(define-fun |baud_generator#4| ((state |baud_generator_s|)) Bool (= (|baud_generator#2| state) #b111)) ; $0\ck_stb[0:0]
(define-fun |baud_generator_a| ((state |baud_generator_s|)) Bool true)
(define-fun |baud_generator_u| ((state |baud_generator_s|)) Bool true)
(define-fun |baud_generator_i| ((state |baud_generator_s|)) Bool (and
  (= (= ((_ extract 0 0) (|baud_generator#0| state)) #b1) false) ; ck_stb
  (= (|baud_generator#2| state) #b000) ; cnt
))
(define-fun |baud_generator_h| ((state |baud_generator_s|)) Bool true)
(define-fun |baud_generator_t| ((state |baud_generator_s|) (next_state |baud_generator_s|)) Bool (and
  (= (|baud_generator#3| state) (|baud_generator#2| next_state)) ; $procdff$971 \cnt
  (= (ite (|baud_generator#4| state) #b1 #b0) (|baud_generator#0| next_state)) ; $procdff$972 \ck_stb
)) ; end of module baud_generator
; yosys-smt2-module TxUART
(declare-sort |TxUART_s| 0)
(declare-fun |TxUART_is| (|TxUART_s|) Bool)
; yosys-smt2-input baud_clk 1
; yosys-smt2-wire baud_clk 1
(declare-fun |TxUART#0| (|TxUART_s|) Bool) ; \baud_clk
(define-fun |TxUART_n baud_clk| ((state |TxUART_s|)) Bool (|TxUART#0| state))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |TxUART#1| (|TxUART_s|) Bool) ; \clk
(define-fun |TxUART_n clk| ((state |TxUART_s|)) Bool (|TxUART#1| state))
; yosys-smt2-input enable 1
; yosys-smt2-wire enable 1
(declare-fun |TxUART#2| (|TxUART_s|) Bool) ; \enable
(define-fun |TxUART_n enable| ((state |TxUART_s|)) Bool (|TxUART#2| state))
; yosys-smt2-input i_data 9
; yosys-smt2-wire i_data 9
(declare-fun |TxUART#3| (|TxUART_s|) (_ BitVec 9)) ; \i_data
(define-fun |TxUART_n i_data| ((state |TxUART_s|)) (_ BitVec 9) (|TxUART#3| state))
; yosys-smt2-output o_busy 1
; yosys-smt2-register o_busy 1
; yosys-smt2-wire o_busy 1
(declare-fun |TxUART#4| (|TxUART_s|) (_ BitVec 1)) ; \o_busy
(define-fun |TxUART_n o_busy| ((state |TxUART_s|)) Bool (= ((_ extract 0 0) (|TxUART#4| state)) #b1))
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
(declare-fun |TxUART#5| (|TxUART_s|) Bool) ; \reset
(define-fun |TxUART_n reset| ((state |TxUART_s|)) Bool (|TxUART#5| state))
; yosys-smt2-output serial_out 1
; yosys-smt2-register serial_out 1
; yosys-smt2-wire serial_out 1
(declare-fun |TxUART#6| (|TxUART_s|) (_ BitVec 1)) ; \serial_out
(define-fun |TxUART_n serial_out| ((state |TxUART_s|)) Bool (= ((_ extract 0 0) (|TxUART#6| state)) #b1))
; yosys-smt2-register shift_reg 11
; yosys-smt2-wire shift_reg 11
(declare-fun |TxUART#7| (|TxUART_s|) (_ BitVec 11)) ; \shift_reg
(define-fun |TxUART_n shift_reg| ((state |TxUART_s|)) (_ BitVec 11) (|TxUART#7| state))
(define-fun |TxUART#8| ((state |TxUART_s|)) Bool (not (or  (= ((_ extract 0 0) (|TxUART#4| state)) #b1) false))) ; $logic_not$../rtl/Tx/TxUART.v:28$205_Y
(define-fun |TxUART#9| ((state |TxUART_s|)) (_ BitVec 1) (bvand (ite (|TxUART#2| state) #b1 #b0) (ite (|TxUART#8| state) #b1 #b0))) ; $and$../rtl/Tx/TxUART.v:28$206_Y
(define-fun |TxUART#10| ((state |TxUART_s|)) (_ BitVec 11) (ite (= ((_ extract 0 0) (|TxUART#9| state)) #b1) (concat #b1 (concat (|TxUART#3| state) #b0)) (|TxUART#7| state))) ; $procmux$373_Y
(define-fun |TxUART#11| ((state |TxUART_s|)) (_ BitVec 11) (ite (= ((_ extract 0 0) (|TxUART#4| state)) #b1) (concat #b0 ((_ extract 10 1) (|TxUART#7| state))) (|TxUART#10| state))) ; $procmux$377_Y
(define-fun |TxUART#12| ((state |TxUART_s|)) (_ BitVec 11) (ite (|TxUART#0| state) (|TxUART#11| state) (|TxUART#10| state))) ; $procmux$379_Y
(define-fun |TxUART#13| ((state |TxUART_s|)) (_ BitVec 11) (ite (|TxUART#5| state) #b11111111111 (|TxUART#12| state))) ; $0\shift_reg[10:0]
(define-fun |TxUART#14| ((state |TxUART_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|TxUART#4| state)) #b1) ((_ extract 0 0) (|TxUART#7| state)) (|TxUART#6| state))) ; $procmux$365_Y
(define-fun |TxUART#15| ((state |TxUART_s|)) (_ BitVec 1) (ite (|TxUART#0| state) (|TxUART#14| state) (|TxUART#6| state))) ; $procmux$367_Y
(define-fun |TxUART#16| ((state |TxUART_s|)) (_ BitVec 1) (ite (|TxUART#5| state) #b1 (|TxUART#15| state))) ; $0\serial_out[0:0]
(define-fun |TxUART#17| ((state |TxUART_s|)) Bool (or  (= ((_ extract 0 0) (|TxUART#7| state)) #b1) (= ((_ extract 1 1) (|TxUART#7| state)) #b1) (= ((_ extract 2 2) (|TxUART#7| state)) #b1) (= ((_ extract 3 3) (|TxUART#7| state)) #b1) (= ((_ extract 4 4) (|TxUART#7| state)) #b1) (= ((_ extract 5 5) (|TxUART#7| state)) #b1) (= ((_ extract 6 6) (|TxUART#7| state)) #b1) (= ((_ extract 7 7) (|TxUART#7| state)) #b1) (= ((_ extract 8 8) (|TxUART#7| state)) #b1) (= ((_ extract 9 9) (|TxUART#7| state)) #b1) (= ((_ extract 10 10) (|TxUART#7| state)) #b1))) ; $ne$../rtl/Tx/TxUART.v:62$209_Y
(define-fun |TxUART#18| ((state |TxUART_s|)) Bool (and  (= ((_ extract 10 10) (|TxUART#7| state)) #b1) (= ((_ extract 9 9) (|TxUART#7| state)) #b1) (= ((_ extract 8 8) (|TxUART#7| state)) #b1) (= ((_ extract 7 7) (|TxUART#7| state)) #b1) (= ((_ extract 6 6) (|TxUART#7| state)) #b1) (= ((_ extract 5 5) (|TxUART#7| state)) #b1) (= ((_ extract 4 4) (|TxUART#7| state)) #b1) (= ((_ extract 3 3) (|TxUART#7| state)) #b1) (= ((_ extract 2 2) (|TxUART#7| state)) #b1) (= ((_ extract 1 1) (|TxUART#7| state)) #b1) (= ((_ extract 0 0) (|TxUART#7| state)) #b1))) ; $reduce_and$../rtl/Tx/TxUART.v:62$210_Y
(define-fun |TxUART#19| ((state |TxUART_s|)) Bool (not (or  (|TxUART#18| state) false))) ; $logic_not$../rtl/Tx/TxUART.v:62$211_Y
(define-fun |TxUART#20| ((state |TxUART_s|)) Bool (and (or  (|TxUART#17| state) false) (or  (|TxUART#19| state) false))) ; $logic_and$../rtl/Tx/TxUART.v:62$212_Y
(define-fun |TxUART#21| ((state |TxUART_s|)) (_ BitVec 1) (bvor (ite (|TxUART#20| state) #b1 #b0) (ite (|TxUART#2| state) #b1 #b0))) ; $or$../rtl/Tx/TxUART.v:62$213_Y
(define-fun |TxUART#22| ((state |TxUART_s|)) (_ BitVec 1) (ite (|TxUART#5| state) #b0 (|TxUART#21| state))) ; $0\o_busy[0:0]
(define-fun |TxUART_a| ((state |TxUART_s|)) Bool true)
(define-fun |TxUART_u| ((state |TxUART_s|)) Bool true)
(define-fun |TxUART_i| ((state |TxUART_s|)) Bool (and
  (= (= ((_ extract 0 0) (|TxUART#6| state)) #b1) true) ; serial_out
  (= (|TxUART#7| state) #b11111111111) ; shift_reg
))
(define-fun |TxUART_h| ((state |TxUART_s|)) Bool true)
(define-fun |TxUART_t| ((state |TxUART_s|) (next_state |TxUART_s|)) Bool (and
  (= (|TxUART#13| state) (|TxUART#7| next_state)) ; $procdff$981 \shift_reg
  (= (|TxUART#16| state) (|TxUART#6| next_state)) ; $procdff$980 \serial_out
  (= (|TxUART#22| state) (|TxUART#4| next_state)) ; $procdff$979 \o_busy
)) ; end of module TxUART
; yosys-smt2-module synchronizer
(declare-sort |synchronizer_s| 0)
(declare-fun |synchronizer_is| (|synchronizer_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |synchronizer#0| (|synchronizer_s|) Bool) ; \clk
(define-fun |synchronizer_n clk| ((state |synchronizer_s|)) Bool (|synchronizer#0| state))
; yosys-smt2-input serial_in 1
; yosys-smt2-wire serial_in 1
(declare-fun |synchronizer#1| (|synchronizer_s|) Bool) ; \serial_in
(define-fun |synchronizer_n serial_in| ((state |synchronizer_s|)) Bool (|synchronizer#1| state))
; yosys-smt2-register serial_in_reg 1
; yosys-smt2-wire serial_in_reg 1
(declare-fun |synchronizer#2| (|synchronizer_s|) (_ BitVec 1)) ; \serial_in_reg
(define-fun |synchronizer_n serial_in_reg| ((state |synchronizer_s|)) Bool (= ((_ extract 0 0) (|synchronizer#2| state)) #b1))
; yosys-smt2-register serial_in_reg2 1
; yosys-smt2-wire serial_in_reg2 1
(declare-fun |synchronizer#3| (|synchronizer_s|) (_ BitVec 1)) ; \serial_in_reg2
(define-fun |synchronizer_n serial_in_reg2| ((state |synchronizer_s|)) Bool (= ((_ extract 0 0) (|synchronizer#3| state)) #b1))
; yosys-smt2-output serial_in_synced 1
; yosys-smt2-register serial_in_synced 1
; yosys-smt2-wire serial_in_synced 1
(declare-fun |synchronizer#4| (|synchronizer_s|) (_ BitVec 1)) ; \serial_in_synced
(define-fun |synchronizer_n serial_in_synced| ((state |synchronizer_s|)) Bool (= ((_ extract 0 0) (|synchronizer#4| state)) #b1))
(define-fun |synchronizer#5| ((state |synchronizer_s|)) Bool (|synchronizer_is| state)) ; $0$formal$../rtl/Rx/synchronizer.v:18$238_EN[0:0]$250
; yosys-smt2-assume 0 ../rtl/Rx/synchronizer.v:18
(define-fun |synchronizer_u 0| ((state |synchronizer_s|)) Bool (or (= ((_ extract 0 0) (|synchronizer#2| state)) #b1) (not (|synchronizer#5| state)))) ; $assume$../rtl/Rx/synchronizer.v:18$245
; yosys-smt2-assume 1 ../rtl/Rx/synchronizer.v:19
(define-fun |synchronizer_u 1| ((state |synchronizer_s|)) Bool (or (= ((_ extract 0 0) (|synchronizer#3| state)) #b1) (not (|synchronizer#5| state)))) ; $assume$../rtl/Rx/synchronizer.v:19$246
; yosys-smt2-assume 2 ../rtl/Rx/synchronizer.v:20
(define-fun |synchronizer_u 2| ((state |synchronizer_s|)) Bool (or (= ((_ extract 0 0) (|synchronizer#4| state)) #b1) (not (|synchronizer#5| state)))) ; $assume$../rtl/Rx/synchronizer.v:20$247
(define-fun |synchronizer_a| ((state |synchronizer_s|)) Bool true)
(define-fun |synchronizer_u| ((state |synchronizer_s|)) Bool (and
  (|synchronizer_u 0| state)
  (|synchronizer_u 1| state)
  (|synchronizer_u 2| state)
))
(define-fun |synchronizer_i| ((state |synchronizer_s|)) Bool true)
(define-fun |synchronizer_h| ((state |synchronizer_s|)) Bool true)
(define-fun |synchronizer_t| ((state |synchronizer_s|) (next_state |synchronizer_s|)) Bool (and
  (= (|synchronizer#3| state) (|synchronizer#4| next_state)) ; $procdff$960 \serial_in_synced
  (= (|synchronizer#2| state) (|synchronizer#3| next_state)) ; $procdff$962 \serial_in_reg2
  (= (ite (|synchronizer#1| state) #b1 #b0) (|synchronizer#2| next_state)) ; $procdff$961 \serial_in_reg
)) ; end of module synchronizer
; yosys-smt2-module check_parity
(declare-sort |check_parity_s| 0)
(declare-fun |check_parity_is| (|check_parity_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |check_parity#0| (|check_parity_s|) Bool) ; \clk
(define-fun |check_parity_n clk| ((state |check_parity_s|)) Bool (|check_parity#0| state))
; yosys-smt2-input is_parity_stage 1
; yosys-smt2-wire is_parity_stage 1
(declare-fun |check_parity#1| (|check_parity_s|) Bool) ; \is_parity_stage
(define-fun |check_parity_n is_parity_stage| ((state |check_parity_s|)) Bool (|check_parity#1| state))
; yosys-smt2-register parity_bit 1
; yosys-smt2-wire parity_bit 1
(declare-fun |check_parity#2| (|check_parity_s|) (_ BitVec 1)) ; \parity_bit
(define-fun |check_parity_n parity_bit| ((state |check_parity_s|)) Bool (= ((_ extract 0 0) (|check_parity#2| state)) #b1))
; yosys-smt2-register parity_value 1
; yosys-smt2-wire parity_value 1
(declare-fun |check_parity#3| (|check_parity_s|) (_ BitVec 1)) ; \parity_value
(define-fun |check_parity_n parity_value| ((state |check_parity_s|)) Bool (= ((_ extract 0 0) (|check_parity#3| state)) #b1))
; yosys-smt2-input received_data 8
; yosys-smt2-wire received_data 8
(declare-fun |check_parity#4| (|check_parity_s|) (_ BitVec 8)) ; \received_data
(define-fun |check_parity_n received_data| ((state |check_parity_s|)) (_ BitVec 8) (|check_parity#4| state))
; yosys-smt2-output rx_error 1
; yosys-smt2-register rx_error 1
; yosys-smt2-wire rx_error 1
(declare-fun |check_parity#5| (|check_parity_s|) (_ BitVec 1)) ; \rx_error
(define-fun |check_parity_n rx_error| ((state |check_parity_s|)) Bool (= ((_ extract 0 0) (|check_parity#5| state)) #b1))
; yosys-smt2-input serial_in_synced 1
; yosys-smt2-wire serial_in_synced 1
(declare-fun |check_parity#6| (|check_parity_s|) Bool) ; \serial_in_synced
(define-fun |check_parity_n serial_in_synced| ((state |check_parity_s|)) Bool (|check_parity#6| state))
(define-fun |check_parity#7| ((state |check_parity_s|)) Bool (distinct (|check_parity#2| state) (|check_parity#3| state))) ; $ne$../rtl/Rx/check_parity.v:17$293_Y
(define-fun |check_parity#8| ((state |check_parity_s|)) (_ BitVec 1) (ite (|check_parity#1| state) (ite (|check_parity#7| state) #b1 #b0) (|check_parity#5| state))) ; $0\rx_error[0:0]
(define-fun |check_parity#9| ((state |check_parity_s|)) Bool (xor  (= ((_ extract 0 0) (|check_parity#4| state)) #b1) (= ((_ extract 1 1) (|check_parity#4| state)) #b1) (= ((_ extract 2 2) (|check_parity#4| state)) #b1) (= ((_ extract 3 3) (|check_parity#4| state)) #b1) (= ((_ extract 4 4) (|check_parity#4| state)) #b1) (= ((_ extract 5 5) (|check_parity#4| state)) #b1) (= ((_ extract 6 6) (|check_parity#4| state)) #b1) (= ((_ extract 7 7) (|check_parity#4| state)) #b1))) ; $reduce_xor$../rtl/Rx/check_parity.v:16$292_Y
(define-fun |check_parity#10| ((state |check_parity_s|)) (_ BitVec 1) (ite (|check_parity#1| state) (ite (|check_parity#9| state) #b1 #b0) (|check_parity#3| state))) ; $0\parity_value[0:0]
(define-fun |check_parity#11| ((state |check_parity_s|)) (_ BitVec 1) (ite (|check_parity#1| state) (ite (|check_parity#6| state) #b1 #b0) (|check_parity#2| state))) ; $0\parity_bit[0:0]
(define-fun |check_parity_a| ((state |check_parity_s|)) Bool true)
(define-fun |check_parity_u| ((state |check_parity_s|)) Bool true)
(define-fun |check_parity_i| ((state |check_parity_s|)) Bool 
  (= (= ((_ extract 0 0) (|check_parity#5| state)) #b1) false) ; rx_error
)
(define-fun |check_parity_h| ((state |check_parity_s|)) Bool true)
(define-fun |check_parity_t| ((state |check_parity_s|) (next_state |check_parity_s|)) Bool (and
  (= (|check_parity#8| state) (|check_parity#5| next_state)) ; $procdff$968 \rx_error
  (= (|check_parity#10| state) (|check_parity#3| next_state)) ; $procdff$970 \parity_value
  (= (|check_parity#11| state) (|check_parity#2| next_state)) ; $procdff$969 \parity_bit
)) ; end of module check_parity
; yosys-smt2-module rx_state
(declare-sort |rx_state_s| 0)
(declare-fun |rx_state_is| (|rx_state_s|) Bool)
; yosys-smt2-register $formal$../rtl/Rx/rx_state.v:75$274_CHECK 1
(declare-fun |rx_state#0| (|rx_state_s|) (_ BitVec 1)) ; $formal$../rtl/Rx/rx_state.v:75$274_CHECK
(define-fun |rx_state_n $formal$../rtl/Rx/rx_state.v:75$274_CHECK| ((state |rx_state_s|)) Bool (= ((_ extract 0 0) (|rx_state#0| state)) #b1))
; yosys-smt2-register $formal$../rtl/Rx/rx_state.v:75$274_EN 1
(declare-fun |rx_state#1| (|rx_state_s|) (_ BitVec 1)) ; $formal$../rtl/Rx/rx_state.v:75$274_EN
(define-fun |rx_state_n $formal$../rtl/Rx/rx_state.v:75$274_EN| ((state |rx_state_s|)) Bool (= ((_ extract 0 0) (|rx_state#1| state)) #b1))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |rx_state#2| (|rx_state_s|) Bool) ; \clk
(define-fun |rx_state_n clk| ((state |rx_state_s|)) Bool (|rx_state#2| state))
; yosys-smt2-output data_is_available 1
; yosys-smt2-register data_is_available 1
; yosys-smt2-wire data_is_available 1
(declare-fun |rx_state#3| (|rx_state_s|) (_ BitVec 1)) ; \data_is_available
(define-fun |rx_state_n data_is_available| ((state |rx_state_s|)) Bool (= ((_ extract 0 0) (|rx_state#3| state)) #b1))
; yosys-smt2-output data_is_valid 1
; yosys-smt2-register data_is_valid 1
; yosys-smt2-wire data_is_valid 1
(declare-fun |rx_state#4| (|rx_state_s|) (_ BitVec 1)) ; \data_is_valid
(define-fun |rx_state_n data_is_valid| ((state |rx_state_s|)) Bool (= ((_ extract 0 0) (|rx_state#4| state)) #b1))
; yosys-smt2-output is_parity_stage 1
; yosys-smt2-register is_parity_stage 1
; yosys-smt2-wire is_parity_stage 1
(declare-fun |rx_state#5| (|rx_state_s|) (_ BitVec 1)) ; \is_parity_stage
(define-fun |rx_state_n is_parity_stage| ((state |rx_state_s|)) Bool (= ((_ extract 0 0) (|rx_state#5| state)) #b1))
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
(declare-fun |rx_state#6| (|rx_state_s|) Bool) ; \reset
(define-fun |rx_state_n reset| ((state |rx_state_s|)) Bool (|rx_state#6| state))
; yosys-smt2-input sampling_strobe 1
; yosys-smt2-wire sampling_strobe 1
(declare-fun |rx_state#7| (|rx_state_s|) Bool) ; \sampling_strobe
(define-fun |rx_state_n sampling_strobe| ((state |rx_state_s|)) Bool (|rx_state#7| state))
; yosys-smt2-input start_detected 1
; yosys-smt2-wire start_detected 1
(declare-fun |rx_state#8| (|rx_state_s|) Bool) ; \start_detected
(define-fun |rx_state_n start_detected| ((state |rx_state_s|)) Bool (|rx_state#8| state))
; yosys-smt2-output state 4
; yosys-smt2-register state 4
; yosys-smt2-wire state 4
(declare-fun |rx_state#9| (|rx_state_s|) (_ BitVec 4)) ; \state
(define-fun |rx_state_n state| ((state |rx_state_s|)) (_ BitVec 4) (|rx_state#9| state))
; yosys-smt2-assume 0 ../rtl/Rx/rx_state.v:75
(define-fun |rx_state_u 0| ((state |rx_state_s|)) Bool (or (= ((_ extract 0 0) (|rx_state#0| state)) #b1) (not (= ((_ extract 0 0) (|rx_state#1| state)) #b1)))) ; $assume$../rtl/Rx/rx_state.v:75$288
(define-fun |rx_state#10| ((state |rx_state_s|)) (_ BitVec 4) (bvadd (|rx_state#9| state) #b0001)) ; $add$../rtl/Rx/rx_state.v:59$283_Y
(define-fun |rx_state#11| ((state |rx_state_s|)) (_ BitVec 1) (ite (|rx_state#8| state) #b1 #b0)) ; $auto$wreduce.cc:347:run$1040 [0]
(define-fun |rx_state#12| ((state |rx_state_s|)) Bool (= (|rx_state#9| state) #b1010)) ; $0\is_parity_stage[0:0]
(define-fun |rx_state#13| ((state |rx_state_s|)) Bool (= (|rx_state#9| state) #b1001)) ; $procmux$352_CMP [7]
(define-fun |rx_state#14| ((state |rx_state_s|)) Bool (= (|rx_state#9| state) #b1000)) ; $procmux$352_CMP [6]
(define-fun |rx_state#15| ((state |rx_state_s|)) Bool (= (|rx_state#9| state) #b0111)) ; $procmux$352_CMP [5]
(define-fun |rx_state#16| ((state |rx_state_s|)) Bool (= (|rx_state#9| state) #b0110)) ; $procmux$352_CMP [4]
(define-fun |rx_state#17| ((state |rx_state_s|)) Bool (= (|rx_state#9| state) #b0101)) ; $procmux$352_CMP [3]
(define-fun |rx_state#18| ((state |rx_state_s|)) Bool (= (|rx_state#9| state) #b0100)) ; $procmux$352_CMP [2]
(define-fun |rx_state#19| ((state |rx_state_s|)) Bool (= (|rx_state#9| state) #b0011)) ; $procmux$352_CMP [1]
(define-fun |rx_state#20| ((state |rx_state_s|)) Bool (= (|rx_state#9| state) #b0010)) ; $procmux$352_CMP [0]
(define-fun |rx_state#21| ((state |rx_state_s|)) Bool (or  (|rx_state#13| state) (|rx_state#14| state) (|rx_state#15| state) (|rx_state#16| state) (|rx_state#17| state) (|rx_state#18| state) (|rx_state#19| state) (|rx_state#20| state))) ; $procmux$352_CTRL
(define-fun |rx_state#22| ((state |rx_state_s|)) Bool (= (|rx_state#9| state) #b0001)) ; $procmux$353_CMP
(define-fun |rx_state#23| ((state |rx_state_s|)) Bool (not (or  (= ((_ extract 0 0) (|rx_state#9| state)) #b1) (= ((_ extract 1 1) (|rx_state#9| state)) #b1) (= ((_ extract 2 2) (|rx_state#9| state)) #b1) (= ((_ extract 3 3) (|rx_state#9| state)) #b1)))) ; $procmux$354_CMP
(define-fun |rx_state#24| ((state |rx_state_s|)) (_ BitVec 4) (ite (|rx_state#23| state) (concat #b000 (|rx_state#11| state)) (ite (|rx_state#22| state) #b0010 (ite (|rx_state#21| state) (|rx_state#10| state) (ite (|rx_state#12| state) #b1011 #b0000))))) ; $procmux$350_Y
(define-fun |rx_state#25| ((state |rx_state_s|)) (_ BitVec 4) (ite (|rx_state#7| state) (|rx_state#24| state) (|rx_state#9| state))) ; $procmux$355_Y
(define-fun |rx_state#26| ((state |rx_state_s|)) (_ BitVec 4) (ite (|rx_state#6| state) #b0000 (|rx_state#25| state))) ; $0\state[3:0]
(define-fun |rx_state#27| ((state |rx_state_s|)) Bool (= (|rx_state#9| state) #b1011)) ; $0\data_is_valid[0:0]
(define-fun |rx_state#28| ((state |rx_state_s|)) Bool (bvuge (|rx_state#9| state) #b0010)) ; $ge$../rtl/Rx/rx_state.v:37$278_Y
(define-fun |rx_state#29| ((state |rx_state_s|)) Bool (bvule (|rx_state#9| state) #b1001)) ; $le$../rtl/Rx/rx_state.v:37$279_Y
(define-fun |rx_state#30| ((state |rx_state_s|)) Bool (and (or  (|rx_state#28| state) false) (or  (|rx_state#29| state) false))) ; $0\data_is_available[0:0]
(define-fun |rx_state#31| ((state |rx_state_s|)) Bool (bvule (|rx_state#9| state) #b1011)) ; $0$formal$../rtl/Rx/rx_state.v:75$274_CHECK[0:0]$286
(define-fun |rx_state_a| ((state |rx_state_s|)) Bool true)
(define-fun |rx_state_u| ((state |rx_state_s|)) Bool 
  (|rx_state_u 0| state)
)
(define-fun |rx_state_i| ((state |rx_state_s|)) Bool 
  (= (= ((_ extract 0 0) (|rx_state#1| state)) #b1) false) ; $formal$../rtl/Rx/rx_state.v:75$274_EN
)
(define-fun |rx_state_h| ((state |rx_state_s|)) Bool true)
(define-fun |rx_state_t| ((state |rx_state_s|) (next_state |rx_state_s|)) Bool (and
  (= (|rx_state#26| state) (|rx_state#9| next_state)) ; $procdff$975 \state
  (= (ite (|rx_state#12| state) #b1 #b0) (|rx_state#5| next_state)) ; $procdff$977 \is_parity_stage
  (= (ite (|rx_state#27| state) #b1 #b0) (|rx_state#4| next_state)) ; $procdff$976 \data_is_valid
  (= (ite (|rx_state#30| state) #b1 #b0) (|rx_state#3| next_state)) ; $procdff$978 \data_is_available
  (= #b1 (|rx_state#1| next_state)) ; $procdff$973 $formal$../rtl/Rx/rx_state.v:75$274_EN
  (= (ite (|rx_state#31| state) #b1 #b0) (|rx_state#0| next_state)) ; $procdff$974 $formal$../rtl/Rx/rx_state.v:75$274_CHECK
)) ; end of module rx_state
; yosys-smt2-module detect_start_bit
(declare-sort |detect_start_bit_s| 0)
(declare-fun |detect_start_bit_is| (|detect_start_bit_s|) Bool)
; yosys-smt2-register $formal$../rtl/Rx/detect_start_bit.v:57$295_CHECK 1
(declare-fun |detect_start_bit#0| (|detect_start_bit_s|) (_ BitVec 1)) ; $formal$../rtl/Rx/detect_start_bit.v:57$295_CHECK
(define-fun |detect_start_bit_n $formal$../rtl/Rx/detect_start_bit.v:57$295_CHECK| ((state |detect_start_bit_s|)) Bool (= ((_ extract 0 0) (|detect_start_bit#0| state)) #b1))
; yosys-smt2-register $formal$../rtl/Rx/detect_start_bit.v:57$295_EN 1
(declare-fun |detect_start_bit#1| (|detect_start_bit_s|) (_ BitVec 1)) ; $formal$../rtl/Rx/detect_start_bit.v:57$295_EN
(define-fun |detect_start_bit_n $formal$../rtl/Rx/detect_start_bit.v:57$295_EN| ((state |detect_start_bit_s|)) Bool (= ((_ extract 0 0) (|detect_start_bit#1| state)) #b1))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |detect_start_bit#2| (|detect_start_bit_s|) Bool) ; \clk
(define-fun |detect_start_bit_n clk| ((state |detect_start_bit_s|)) Bool (|detect_start_bit#2| state))
; yosys-smt2-register clocks_since_start_bit 7
; yosys-smt2-wire clocks_since_start_bit 7
(declare-fun |detect_start_bit#3| (|detect_start_bit_s|) (_ BitVec 7)) ; \clocks_since_start_bit
(define-fun |detect_start_bit_n clocks_since_start_bit| ((state |detect_start_bit_s|)) (_ BitVec 7) (|detect_start_bit#3| state))
; yosys-smt2-wire falling_edge 1
(declare-fun |detect_start_bit#4| (|detect_start_bit_s|) Bool) ; \serial_in_synced
(define-fun |detect_start_bit#5| ((state |detect_start_bit_s|)) Bool (not (or  (|detect_start_bit#4| state) false))) ; $logic_not$../rtl/Rx/detect_start_bit.v:21$296_Y
(declare-fun |detect_start_bit#6| (|detect_start_bit_s|) (_ BitVec 1)) ; \previously_idle
(define-fun |detect_start_bit#7| ((state |detect_start_bit_s|)) Bool (and (or  (|detect_start_bit#5| state) false) (or  (= ((_ extract 0 0) (|detect_start_bit#6| state)) #b1) false))) ; \falling_edge
(define-fun |detect_start_bit_n falling_edge| ((state |detect_start_bit_s|)) Bool (|detect_start_bit#7| state))
; yosys-smt2-register previously_idle 1
; yosys-smt2-wire previously_idle 1
(define-fun |detect_start_bit_n previously_idle| ((state |detect_start_bit_s|)) Bool (= ((_ extract 0 0) (|detect_start_bit#6| state)) #b1))
; yosys-smt2-input serial_in_synced 1
; yosys-smt2-wire serial_in_synced 1
(define-fun |detect_start_bit_n serial_in_synced| ((state |detect_start_bit_s|)) Bool (|detect_start_bit#4| state))
; yosys-smt2-output start_detected 1
; yosys-smt2-register start_detected 1
; yosys-smt2-wire start_detected 1
(declare-fun |detect_start_bit#8| (|detect_start_bit_s|) (_ BitVec 1)) ; \start_detected
(define-fun |detect_start_bit_n start_detected| ((state |detect_start_bit_s|)) Bool (= ((_ extract 0 0) (|detect_start_bit#8| state)) #b1))
; yosys-smt2-assert 0 ../rtl/Rx/detect_start_bit.v:57
(define-fun |detect_start_bit_a 0| ((state |detect_start_bit_s|)) Bool (or (= ((_ extract 0 0) (|detect_start_bit#0| state)) #b1) (not (= ((_ extract 0 0) (|detect_start_bit#1| state)) #b1)))) ; $assert$../rtl/Rx/detect_start_bit.v:57$310
(define-fun |detect_start_bit#9| ((state |detect_start_bit_s|)) Bool (bvuge (|detect_start_bit#3| state) #b1011000)) ; $ge$../rtl/Rx/detect_start_bit.v:32$299_Y
(define-fun |detect_start_bit#10| ((state |detect_start_bit_s|)) Bool (and (or  (|detect_start_bit#7| state) false) (or  (|detect_start_bit#9| state) false))) ; $logic_and$../rtl/Rx/detect_start_bit.v:32$300_Y
(define-fun |detect_start_bit#11| ((state |detect_start_bit_s|)) (_ BitVec 1) (ite (|detect_start_bit#10| state) #b1 #b0)) ; $0\start_detected[0:0]
(define-fun |detect_start_bit#12| ((state |detect_start_bit_s|)) (_ BitVec 1) (ite (|detect_start_bit#4| state) #b1 #b0)) ; $0\previously_idle[0:0]
(define-fun |detect_start_bit#13| ((state |detect_start_bit_s|)) (_ BitVec 7) (bvadd (|detect_start_bit#3| state) #b0000001)) ; $add$../rtl/Rx/detect_start_bit.v:39$301_Y
(define-fun |detect_start_bit#14| ((state |detect_start_bit_s|)) (_ BitVec 7) (ite (|detect_start_bit#10| state) #b0000000 (|detect_start_bit#13| state))) ; $0\clocks_since_start_bit[6:0]
(define-fun |detect_start_bit#15| ((state |detect_start_bit_s|)) Bool (not (or  (= ((_ extract 0 0) (|detect_start_bit#3| state)) #b1) (= ((_ extract 1 1) (|detect_start_bit#3| state)) #b1) (= ((_ extract 2 2) (|detect_start_bit#3| state)) #b1) (= ((_ extract 3 3) (|detect_start_bit#3| state)) #b1) (= ((_ extract 4 4) (|detect_start_bit#3| state)) #b1) (= ((_ extract 5 5) (|detect_start_bit#3| state)) #b1) (= ((_ extract 6 6) (|detect_start_bit#3| state)) #b1)))) ; $eq$../rtl/Rx/detect_start_bit.v:56$306_Y
(define-fun |detect_start_bit#16| ((state |detect_start_bit_s|)) Bool (not (or  (|detect_start_bit#7| state) false))) ; $logic_not$../rtl/Rx/detect_start_bit.v:56$307_Y
(define-fun |detect_start_bit#17| ((state |detect_start_bit_s|)) Bool (and (or  (|detect_start_bit#15| state) false) (or  (|detect_start_bit#16| state) false))) ; $logic_and$../rtl/Rx/detect_start_bit.v:56$308_Y
(define-fun |detect_start_bit#18| ((state |detect_start_bit_s|)) (_ BitVec 1) (ite (|detect_start_bit#17| state) #b1 #b0)) ; $0$formal$../rtl/Rx/detect_start_bit.v:57$295_EN[0:0]$305
(define-fun |detect_start_bit#19| ((state |detect_start_bit_s|)) (_ BitVec 1) (bvnot (|detect_start_bit#8| state))) ; $0$formal$../rtl/Rx/detect_start_bit.v:57$295_CHECK[0:0]$304
(define-fun |detect_start_bit_a| ((state |detect_start_bit_s|)) Bool 
  (|detect_start_bit_a 0| state)
)
(define-fun |detect_start_bit_u| ((state |detect_start_bit_s|)) Bool true)
(define-fun |detect_start_bit_i| ((state |detect_start_bit_s|)) Bool (and
  (= (= ((_ extract 0 0) (|detect_start_bit#1| state)) #b1) false) ; $formal$../rtl/Rx/detect_start_bit.v:57$295_EN
  (= (|detect_start_bit#3| state) #b0000000) ; clocks_since_start_bit
  (= (= ((_ extract 0 0) (|detect_start_bit#6| state)) #b1) true) ; previously_idle
  (= (= ((_ extract 0 0) (|detect_start_bit#8| state)) #b1) false) ; start_detected
))
(define-fun |detect_start_bit_h| ((state |detect_start_bit_s|)) Bool true)
(define-fun |detect_start_bit_t| ((state |detect_start_bit_s|) (next_state |detect_start_bit_s|)) Bool (and
  (= (|detect_start_bit#11| state) (|detect_start_bit#8| next_state)) ; $procdff$966 \start_detected
  (= (|detect_start_bit#12| state) (|detect_start_bit#6| next_state)) ; $procdff$965 \previously_idle
  (= (|detect_start_bit#14| state) (|detect_start_bit#3| next_state)) ; $procdff$967 \clocks_since_start_bit
  (= (|detect_start_bit#18| state) (|detect_start_bit#1| next_state)) ; $procdff$964 $formal$../rtl/Rx/detect_start_bit.v:57$295_EN
  (= (|detect_start_bit#19| state) (|detect_start_bit#0| next_state)) ; $procdff$963 $formal$../rtl/Rx/detect_start_bit.v:57$295_CHECK
)) ; end of module detect_start_bit
; yosys-smt2-module sampling_strobe_generator
(declare-sort |sampling_strobe_generator_s| 0)
(declare-fun |sampling_strobe_generator_is| (|sampling_strobe_generator_s|) Bool)
; yosys-smt2-register $formal$../rtl/Rx/sampling_strobe_generator.v:34$259_CHECK 1
(declare-fun |sampling_strobe_generator#0| (|sampling_strobe_generator_s|) (_ BitVec 1)) ; $formal$../rtl/Rx/sampling_strobe_generator.v:34$259_CHECK
(define-fun |sampling_strobe_generator_n $formal$../rtl/Rx/sampling_strobe_generator.v:34$259_CHECK| ((state |sampling_strobe_generator_s|)) Bool (= ((_ extract 0 0) (|sampling_strobe_generator#0| state)) #b1))
; yosys-smt2-register $formal$../rtl/Rx/sampling_strobe_generator.v:34$259_EN 1
(declare-fun |sampling_strobe_generator#1| (|sampling_strobe_generator_s|) (_ BitVec 1)) ; $formal$../rtl/Rx/sampling_strobe_generator.v:34$259_EN
(define-fun |sampling_strobe_generator_n $formal$../rtl/Rx/sampling_strobe_generator.v:34$259_EN| ((state |sampling_strobe_generator_s|)) Bool (= ((_ extract 0 0) (|sampling_strobe_generator#1| state)) #b1))
; yosys-smt2-register $past$../rtl/Rx/sampling_strobe_generator.v:34$258$0 1
(declare-fun |sampling_strobe_generator#2| (|sampling_strobe_generator_s|) (_ BitVec 1)) ; $past$../rtl/Rx/sampling_strobe_generator.v:34$258$0
(define-fun |sampling_strobe_generator_n $past$../rtl/Rx/sampling_strobe_generator.v:34$258$0| ((state |sampling_strobe_generator_s|)) Bool (= ((_ extract 0 0) (|sampling_strobe_generator#2| state)) #b1))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |sampling_strobe_generator#3| (|sampling_strobe_generator_s|) Bool) ; \clk
(define-fun |sampling_strobe_generator_n clk| ((state |sampling_strobe_generator_s|)) Bool (|sampling_strobe_generator#3| state))
; yosys-smt2-register counter 3
; yosys-smt2-wire counter 3
(declare-fun |sampling_strobe_generator#4| (|sampling_strobe_generator_s|) (_ BitVec 3)) ; \counter
(define-fun |sampling_strobe_generator_n counter| ((state |sampling_strobe_generator_s|)) (_ BitVec 3) (|sampling_strobe_generator#4| state))
; yosys-smt2-output sampling_strobe 1
; yosys-smt2-register sampling_strobe 1
; yosys-smt2-wire sampling_strobe 1
(declare-fun |sampling_strobe_generator#5| (|sampling_strobe_generator_s|) (_ BitVec 1)) ; \sampling_strobe
(define-fun |sampling_strobe_generator_n sampling_strobe| ((state |sampling_strobe_generator_s|)) Bool (= ((_ extract 0 0) (|sampling_strobe_generator#5| state)) #b1))
; yosys-smt2-input start_detected 1
; yosys-smt2-wire start_detected 1
(declare-fun |sampling_strobe_generator#6| (|sampling_strobe_generator_s|) Bool) ; \start_detected
(define-fun |sampling_strobe_generator_n start_detected| ((state |sampling_strobe_generator_s|)) Bool (|sampling_strobe_generator#6| state))
; yosys-smt2-assert 0 ../rtl/Rx/sampling_strobe_generator.v:34
(define-fun |sampling_strobe_generator_a 0| ((state |sampling_strobe_generator_s|)) Bool (or (= ((_ extract 0 0) (|sampling_strobe_generator#0| state)) #b1) (not (= ((_ extract 0 0) (|sampling_strobe_generator#1| state)) #b1)))) ; $assert$../rtl/Rx/sampling_strobe_generator.v:34$270
(define-fun |sampling_strobe_generator#7| ((state |sampling_strobe_generator_s|)) Bool (= (|sampling_strobe_generator#4| state) #b111)) ; $eq$../rtl/Rx/sampling_strobe_generator.v:24$263_Y
(define-fun |sampling_strobe_generator#8| ((state |sampling_strobe_generator_s|)) (_ BitVec 1) (ite (|sampling_strobe_generator#7| state) #b1 #b0)) ; $0\sampling_strobe[0:0]
(define-fun |sampling_strobe_generator#9| ((state |sampling_strobe_generator_s|)) (_ BitVec 3) (bvadd (|sampling_strobe_generator#4| state) #b001)) ; $add$../rtl/Rx/sampling_strobe_generator.v:19$261_Y
(define-fun |sampling_strobe_generator#10| ((state |sampling_strobe_generator_s|)) (_ BitVec 3) (ite (|sampling_strobe_generator#6| state) #b100 (|sampling_strobe_generator#9| state))) ; $0\counter[2:0]
(define-fun |sampling_strobe_generator#11| ((state |sampling_strobe_generator_s|)) (_ BitVec 1) (bvand (|sampling_strobe_generator#5| state) (|sampling_strobe_generator#2| state))) ; $and$../rtl/Rx/sampling_strobe_generator.v:34$268_Y
(define-fun |sampling_strobe_generator#12| ((state |sampling_strobe_generator_s|)) Bool (not (or  (= ((_ extract 0 0) (|sampling_strobe_generator#11| state)) #b1) false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false))) ; $0$formal$../rtl/Rx/sampling_strobe_generator.v:34$259_CHECK[0:0]$266
(define-fun |sampling_strobe_generator_a| ((state |sampling_strobe_generator_s|)) Bool 
  (|sampling_strobe_generator_a 0| state)
)
(define-fun |sampling_strobe_generator_u| ((state |sampling_strobe_generator_s|)) Bool true)
(define-fun |sampling_strobe_generator_i| ((state |sampling_strobe_generator_s|)) Bool 
  (= (= ((_ extract 0 0) (|sampling_strobe_generator#1| state)) #b1) false) ; $formal$../rtl/Rx/sampling_strobe_generator.v:34$259_EN
)
(define-fun |sampling_strobe_generator_h| ((state |sampling_strobe_generator_s|)) Bool true)
(define-fun |sampling_strobe_generator_t| ((state |sampling_strobe_generator_s|) (next_state |sampling_strobe_generator_s|)) Bool (and
  (= (|sampling_strobe_generator#8| state) (|sampling_strobe_generator#5| next_state)) ; $procdff$958 \sampling_strobe
  (= (|sampling_strobe_generator#10| state) (|sampling_strobe_generator#4| next_state)) ; $procdff$959 \counter
  (= (|sampling_strobe_generator#5| state) (|sampling_strobe_generator#2| next_state)) ; $procdff$955 $past$../rtl/Rx/sampling_strobe_generator.v:34$258$0
  (= #b1 (|sampling_strobe_generator#1| next_state)) ; $procdff$957 $formal$../rtl/Rx/sampling_strobe_generator.v:34$259_EN
  (= (ite (|sampling_strobe_generator#12| state) #b1 #b0) (|sampling_strobe_generator#0| next_state)) ; $procdff$956 $formal$../rtl/Rx/sampling_strobe_generator.v:34$259_CHECK
)) ; end of module sampling_strobe_generator
; yosys-smt2-module SIPO_shift_register
(declare-sort |SIPO_shift_register_s| 0)
(declare-fun |SIPO_shift_register_is| (|SIPO_shift_register_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |SIPO_shift_register#0| (|SIPO_shift_register_s|) Bool) ; \clk
(define-fun |SIPO_shift_register_n clk| ((state |SIPO_shift_register_s|)) Bool (|SIPO_shift_register#0| state))
; yosys-smt2-input data_is_available 1
; yosys-smt2-wire data_is_available 1
(declare-fun |SIPO_shift_register#1| (|SIPO_shift_register_s|) Bool) ; \data_is_available
(define-fun |SIPO_shift_register_n data_is_available| ((state |SIPO_shift_register_s|)) Bool (|SIPO_shift_register#1| state))
; yosys-smt2-output received_data 8
; yosys-smt2-register received_data 8
; yosys-smt2-wire received_data 8
(declare-fun |SIPO_shift_register#2| (|SIPO_shift_register_s|) (_ BitVec 8)) ; \received_data
(define-fun |SIPO_shift_register_n received_data| ((state |SIPO_shift_register_s|)) (_ BitVec 8) (|SIPO_shift_register#2| state))
; yosys-smt2-input serial_in_synced 1
; yosys-smt2-wire serial_in_synced 1
(declare-fun |SIPO_shift_register#3| (|SIPO_shift_register_s|) Bool) ; \serial_in_synced
(define-fun |SIPO_shift_register_n serial_in_synced| ((state |SIPO_shift_register_s|)) Bool (|SIPO_shift_register#3| state))
(define-fun |SIPO_shift_register#4| ((state |SIPO_shift_register_s|)) (_ BitVec 8) (ite (|SIPO_shift_register#1| state) (concat (ite (|SIPO_shift_register#3| state) #b1 #b0) ((_ extract 7 1) (|SIPO_shift_register#2| state))) (|SIPO_shift_register#2| state))) ; $0\received_data[7:0]
(define-fun |SIPO_shift_register_a| ((state |SIPO_shift_register_s|)) Bool true)
(define-fun |SIPO_shift_register_u| ((state |SIPO_shift_register_s|)) Bool true)
(define-fun |SIPO_shift_register_i| ((state |SIPO_shift_register_s|)) Bool true)
(define-fun |SIPO_shift_register_h| ((state |SIPO_shift_register_s|)) Bool true)
(define-fun |SIPO_shift_register_t| ((state |SIPO_shift_register_s|) (next_state |SIPO_shift_register_s|)) Bool 
  (= (|SIPO_shift_register#4| state) (|SIPO_shift_register#2| next_state)) ; $procdff$954 \received_data
) ; end of module SIPO_shift_register
; yosys-smt2-module Tx_top
(declare-sort |Tx_top_s| 0)
(declare-fun |Tx_top_is| (|Tx_top_s|) Bool)
; yosys-smt2-wire baud_clk 1
; yosys-smt2-cell baud_generator bg
(declare-fun |Tx_top#0| (|Tx_top_s|) Bool) ; \baud_clk
(declare-fun |Tx_top_h bg| (|Tx_top_s|) |baud_generator_s|)
(define-fun |Tx_top_n baud_clk| ((state |Tx_top_s|)) Bool (|Tx_top#0| state))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |Tx_top#1| (|Tx_top_s|) Bool) ; \clk
(define-fun |Tx_top_n clk| ((state |Tx_top_s|)) Bool (|Tx_top#1| state))
; yosys-smt2-input enable 1
; yosys-smt2-wire enable 1
(declare-fun |Tx_top#2| (|Tx_top_s|) Bool) ; \enable
(define-fun |Tx_top_n enable| ((state |Tx_top_s|)) Bool (|Tx_top#2| state))
; yosys-smt2-input i_data 8
; yosys-smt2-wire i_data 8
(declare-fun |Tx_top#3| (|Tx_top_s|) (_ BitVec 8)) ; \i_data
(define-fun |Tx_top_n i_data| ((state |Tx_top_s|)) (_ BitVec 8) (|Tx_top#3| state))
; yosys-smt2-output o_busy 1
; yosys-smt2-wire o_busy 1
; yosys-smt2-cell TxUART tx
(declare-fun |Tx_top#4| (|Tx_top_s|) Bool) ; \o_busy
(declare-fun |Tx_top#5| (|Tx_top_s|) Bool) ; \serial_out
(declare-fun |Tx_top_h tx| (|Tx_top_s|) |TxUART_s|)
(define-fun |Tx_top_n o_busy| ((state |Tx_top_s|)) Bool (|Tx_top#4| state))
; yosys-smt2-wire parity_bit 1
(define-fun |Tx_top#6| ((state |Tx_top_s|)) Bool (xor  (= ((_ extract 0 0) (|Tx_top#3| state)) #b1) (= ((_ extract 1 1) (|Tx_top#3| state)) #b1) (= ((_ extract 2 2) (|Tx_top#3| state)) #b1) (= ((_ extract 3 3) (|Tx_top#3| state)) #b1) (= ((_ extract 4 4) (|Tx_top#3| state)) #b1) (= ((_ extract 5 5) (|Tx_top#3| state)) #b1) (= ((_ extract 6 6) (|Tx_top#3| state)) #b1) (= ((_ extract 7 7) (|Tx_top#3| state)) #b1))) ; \parity_bit
(define-fun |Tx_top_n parity_bit| ((state |Tx_top_s|)) Bool (|Tx_top#6| state))
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
(declare-fun |Tx_top#7| (|Tx_top_s|) Bool) ; \reset
(define-fun |Tx_top_n reset| ((state |Tx_top_s|)) Bool (|Tx_top#7| state))
; yosys-smt2-output serial_out 1
; yosys-smt2-wire serial_out 1
(define-fun |Tx_top_n serial_out| ((state |Tx_top_s|)) Bool (|Tx_top#5| state))
(define-fun |Tx_top_a| ((state |Tx_top_s|)) Bool (and
  (|baud_generator_a| (|Tx_top_h bg| state))
  (|TxUART_a| (|Tx_top_h tx| state))
))
(define-fun |Tx_top_u| ((state |Tx_top_s|)) Bool (and
  (|baud_generator_u| (|Tx_top_h bg| state))
  (|TxUART_u| (|Tx_top_h tx| state))
))
(define-fun |Tx_top_i| ((state |Tx_top_s|)) Bool (and
  (|baud_generator_i| (|Tx_top_h bg| state))
  (|TxUART_i| (|Tx_top_h tx| state))
))
(define-fun |Tx_top_h| ((state |Tx_top_s|)) Bool (and
  (= (|Tx_top_is| state) (|baud_generator_is| (|Tx_top_h bg| state)))
  (= (|Tx_top#0| state) (|baud_generator_n baud_clk| (|Tx_top_h bg| state))) ; baud_generator.baud_clk
  (= (|Tx_top#1| state) (|baud_generator_n clk| (|Tx_top_h bg| state))) ; baud_generator.clk
  (= (|Tx_top_is| state) (|TxUART_is| (|Tx_top_h tx| state)))
  (= (|Tx_top#0| state) (|TxUART_n baud_clk| (|Tx_top_h tx| state))) ; TxUART.baud_clk
  (= (|Tx_top#1| state) (|TxUART_n clk| (|Tx_top_h tx| state))) ; TxUART.clk
  (= (|Tx_top#2| state) (|TxUART_n enable| (|Tx_top_h tx| state))) ; TxUART.enable
  (= (concat (ite (|Tx_top#6| state) #b1 #b0) (|Tx_top#3| state)) (|TxUART_n i_data| (|Tx_top_h tx| state))) ; TxUART.i_data
  (= (|Tx_top#4| state) (|TxUART_n o_busy| (|Tx_top_h tx| state))) ; TxUART.o_busy
  (= (|Tx_top#7| state) (|TxUART_n reset| (|Tx_top_h tx| state))) ; TxUART.reset
  (= (|Tx_top#5| state) (|TxUART_n serial_out| (|Tx_top_h tx| state))) ; TxUART.serial_out
  (|baud_generator_h| (|Tx_top_h bg| state))
  (|TxUART_h| (|Tx_top_h tx| state))
))
(define-fun |Tx_top_t| ((state |Tx_top_s|) (next_state |Tx_top_s|)) Bool (and
  (|baud_generator_t| (|Tx_top_h bg| state) (|Tx_top_h bg| next_state))
  (|TxUART_t| (|Tx_top_h tx| state) (|Tx_top_h tx| next_state))
)) ; end of module Tx_top
; yosys-smt2-module RxUART
(declare-sort |RxUART_s| 0)
(declare-fun |RxUART_is| (|RxUART_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |RxUART#0| (|RxUART_s|) Bool) ; \clk
(define-fun |RxUART_n clk| ((state |RxUART_s|)) Bool (|RxUART#0| state))
; yosys-smt2-output data_is_available 1
; yosys-smt2-wire data_is_available 1
; yosys-smt2-cell rx_state rx_fsm
(declare-fun |RxUART#1| (|RxUART_s|) Bool) ; \data_is_available
(declare-fun |RxUART#2| (|RxUART_s|) Bool) ; \data_is_valid
(declare-fun |RxUART#3| (|RxUART_s|) Bool) ; \is_parity_stage
(declare-fun |RxUART#4| (|RxUART_s|) (_ BitVec 4)) ; \state
(declare-fun |RxUART_h rx_fsm| (|RxUART_s|) |rx_state_s|)
(define-fun |RxUART_n data_is_available| ((state |RxUART_s|)) Bool (|RxUART#1| state))
; yosys-smt2-output data_is_valid 1
; yosys-smt2-wire data_is_valid 1
(define-fun |RxUART_n data_is_valid| ((state |RxUART_s|)) Bool (|RxUART#2| state))
; yosys-smt2-output is_parity_stage 1
; yosys-smt2-wire is_parity_stage 1
(define-fun |RxUART_n is_parity_stage| ((state |RxUART_s|)) Bool (|RxUART#3| state))
; yosys-smt2-output received_data 8
; yosys-smt2-wire received_data 8
; yosys-smt2-cell SIPO_shift_register SIPO
(declare-fun |RxUART#5| (|RxUART_s|) (_ BitVec 8)) ; \received_data
(declare-fun |RxUART_h SIPO| (|RxUART_s|) |SIPO_shift_register_s|)
(define-fun |RxUART_n received_data| ((state |RxUART_s|)) (_ BitVec 8) (|RxUART#5| state))
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
(declare-fun |RxUART#6| (|RxUART_s|) Bool) ; \reset
(define-fun |RxUART_n reset| ((state |RxUART_s|)) Bool (|RxUART#6| state))
; yosys-smt2-wire sampling_strobe 1
; yosys-smt2-cell sampling_strobe_generator ssg
(declare-fun |RxUART#7| (|RxUART_s|) Bool) ; \sampling_strobe
(declare-fun |RxUART_h ssg| (|RxUART_s|) |sampling_strobe_generator_s|)
(define-fun |RxUART_n sampling_strobe| ((state |RxUART_s|)) Bool (|RxUART#7| state))
; yosys-smt2-input serial_in_synced 1
; yosys-smt2-wire serial_in_synced 1
(declare-fun |RxUART#8| (|RxUART_s|) Bool) ; \serial_in_synced
(define-fun |RxUART_n serial_in_synced| ((state |RxUART_s|)) Bool (|RxUART#8| state))
; yosys-smt2-wire start_detected 1
; yosys-smt2-cell detect_start_bit dsb
(declare-fun |RxUART#9| (|RxUART_s|) Bool) ; \start_detected
(declare-fun |RxUART_h dsb| (|RxUART_s|) |detect_start_bit_s|)
(define-fun |RxUART_n start_detected| ((state |RxUART_s|)) Bool (|RxUART#9| state))
; yosys-smt2-output state 4
; yosys-smt2-wire state 4
(define-fun |RxUART_n state| ((state |RxUART_s|)) (_ BitVec 4) (|RxUART#4| state))
(define-fun |RxUART_a| ((state |RxUART_s|)) Bool (and
  (|detect_start_bit_a| (|RxUART_h dsb| state))
  (|rx_state_a| (|RxUART_h rx_fsm| state))
  (|SIPO_shift_register_a| (|RxUART_h SIPO| state))
  (|sampling_strobe_generator_a| (|RxUART_h ssg| state))
))
(define-fun |RxUART_u| ((state |RxUART_s|)) Bool (and
  (|detect_start_bit_u| (|RxUART_h dsb| state))
  (|rx_state_u| (|RxUART_h rx_fsm| state))
  (|SIPO_shift_register_u| (|RxUART_h SIPO| state))
  (|sampling_strobe_generator_u| (|RxUART_h ssg| state))
))
(define-fun |RxUART_i| ((state |RxUART_s|)) Bool (and
  (|detect_start_bit_i| (|RxUART_h dsb| state))
  (|rx_state_i| (|RxUART_h rx_fsm| state))
  (|SIPO_shift_register_i| (|RxUART_h SIPO| state))
  (|sampling_strobe_generator_i| (|RxUART_h ssg| state))
))
(define-fun |RxUART_h| ((state |RxUART_s|)) Bool (and
  (= (|RxUART_is| state) (|detect_start_bit_is| (|RxUART_h dsb| state)))
  (= (|RxUART#0| state) (|detect_start_bit_n clk| (|RxUART_h dsb| state))) ; detect_start_bit.clk
  (= (|RxUART#8| state) (|detect_start_bit_n serial_in_synced| (|RxUART_h dsb| state))) ; detect_start_bit.serial_in_synced
  (= (|RxUART#9| state) (|detect_start_bit_n start_detected| (|RxUART_h dsb| state))) ; detect_start_bit.start_detected
  (= (|RxUART_is| state) (|rx_state_is| (|RxUART_h rx_fsm| state)))
  (= (|RxUART#0| state) (|rx_state_n clk| (|RxUART_h rx_fsm| state))) ; rx_state.clk
  (= (|RxUART#1| state) (|rx_state_n data_is_available| (|RxUART_h rx_fsm| state))) ; rx_state.data_is_available
  (= (|RxUART#2| state) (|rx_state_n data_is_valid| (|RxUART_h rx_fsm| state))) ; rx_state.data_is_valid
  (= (|RxUART#3| state) (|rx_state_n is_parity_stage| (|RxUART_h rx_fsm| state))) ; rx_state.is_parity_stage
  (= (|RxUART#6| state) (|rx_state_n reset| (|RxUART_h rx_fsm| state))) ; rx_state.reset
  (= (|RxUART#7| state) (|rx_state_n sampling_strobe| (|RxUART_h rx_fsm| state))) ; rx_state.sampling_strobe
  (= (|RxUART#9| state) (|rx_state_n start_detected| (|RxUART_h rx_fsm| state))) ; rx_state.start_detected
  (= (|RxUART#4| state) (|rx_state_n state| (|RxUART_h rx_fsm| state))) ; rx_state.state
  (= (|RxUART_is| state) (|SIPO_shift_register_is| (|RxUART_h SIPO| state)))
  (= (|RxUART#7| state) (|SIPO_shift_register_n clk| (|RxUART_h SIPO| state))) ; SIPO_shift_register.clk
  (= (|RxUART#1| state) (|SIPO_shift_register_n data_is_available| (|RxUART_h SIPO| state))) ; SIPO_shift_register.data_is_available
  (= (|RxUART#5| state) (|SIPO_shift_register_n received_data| (|RxUART_h SIPO| state))) ; SIPO_shift_register.received_data
  (= (|RxUART#8| state) (|SIPO_shift_register_n serial_in_synced| (|RxUART_h SIPO| state))) ; SIPO_shift_register.serial_in_synced
  (= (|RxUART_is| state) (|sampling_strobe_generator_is| (|RxUART_h ssg| state)))
  (= (|RxUART#0| state) (|sampling_strobe_generator_n clk| (|RxUART_h ssg| state))) ; sampling_strobe_generator.clk
  (= (|RxUART#7| state) (|sampling_strobe_generator_n sampling_strobe| (|RxUART_h ssg| state))) ; sampling_strobe_generator.sampling_strobe
  (= (|RxUART#9| state) (|sampling_strobe_generator_n start_detected| (|RxUART_h ssg| state))) ; sampling_strobe_generator.start_detected
  (|detect_start_bit_h| (|RxUART_h dsb| state))
  (|rx_state_h| (|RxUART_h rx_fsm| state))
  (|SIPO_shift_register_h| (|RxUART_h SIPO| state))
  (|sampling_strobe_generator_h| (|RxUART_h ssg| state))
))
(define-fun |RxUART_t| ((state |RxUART_s|) (next_state |RxUART_s|)) Bool (and
  (|detect_start_bit_t| (|RxUART_h dsb| state) (|RxUART_h dsb| next_state))
  (|rx_state_t| (|RxUART_h rx_fsm| state) (|RxUART_h rx_fsm| next_state))
  (|SIPO_shift_register_t| (|RxUART_h SIPO| state) (|RxUART_h SIPO| next_state))
  (|sampling_strobe_generator_t| (|RxUART_h ssg| state) (|RxUART_h ssg| next_state))
)) ; end of module RxUART
; yosys-smt2-module Rx_top
(declare-sort |Rx_top_s| 0)
(declare-fun |Rx_top_is| (|Rx_top_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |Rx_top#0| (|Rx_top_s|) Bool) ; \clk
(define-fun |Rx_top_n clk| ((state |Rx_top_s|)) Bool (|Rx_top#0| state))
; yosys-smt2-wire data_is_available 1
; yosys-smt2-cell RxUART rx
(declare-fun |Rx_top#1| (|Rx_top_s|) Bool) ; \data_is_available
(declare-fun |Rx_top#2| (|Rx_top_s|) Bool) ; \data_is_valid
(declare-fun |Rx_top#3| (|Rx_top_s|) Bool) ; \is_parity_stage
(declare-fun |Rx_top#4| (|Rx_top_s|) (_ BitVec 8)) ; \received_data
(declare-fun |Rx_top#5| (|Rx_top_s|) (_ BitVec 4)) ; \state
(declare-fun |Rx_top_h rx| (|Rx_top_s|) |RxUART_s|)
(define-fun |Rx_top_n data_is_available| ((state |Rx_top_s|)) Bool (|Rx_top#1| state))
; yosys-smt2-output data_is_valid 1
; yosys-smt2-wire data_is_valid 1
(define-fun |Rx_top_n data_is_valid| ((state |Rx_top_s|)) Bool (|Rx_top#2| state))
; yosys-smt2-wire is_parity_stage 1
(define-fun |Rx_top_n is_parity_stage| ((state |Rx_top_s|)) Bool (|Rx_top#3| state))
; yosys-smt2-output received_data 8
; yosys-smt2-wire received_data 8
(define-fun |Rx_top_n received_data| ((state |Rx_top_s|)) (_ BitVec 8) (|Rx_top#4| state))
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
(declare-fun |Rx_top#6| (|Rx_top_s|) Bool) ; \reset
(define-fun |Rx_top_n reset| ((state |Rx_top_s|)) Bool (|Rx_top#6| state))
; yosys-smt2-output rx_error 1
; yosys-smt2-wire rx_error 1
; yosys-smt2-cell check_parity cp
(declare-fun |Rx_top#7| (|Rx_top_s|) Bool) ; \rx_error
(declare-fun |Rx_top_h cp| (|Rx_top_s|) |check_parity_s|)
(define-fun |Rx_top_n rx_error| ((state |Rx_top_s|)) Bool (|Rx_top#7| state))
; yosys-smt2-input serial_in 1
; yosys-smt2-wire serial_in 1
(declare-fun |Rx_top#8| (|Rx_top_s|) Bool) ; \serial_in
(define-fun |Rx_top_n serial_in| ((state |Rx_top_s|)) Bool (|Rx_top#8| state))
; yosys-smt2-wire serial_in_synced 1
; yosys-smt2-cell synchronizer sync
(declare-fun |Rx_top#9| (|Rx_top_s|) Bool) ; \serial_in_synced
(declare-fun |Rx_top_h sync| (|Rx_top_s|) |synchronizer_s|)
(define-fun |Rx_top_n serial_in_synced| ((state |Rx_top_s|)) Bool (|Rx_top#9| state))
; yosys-smt2-output state 4
; yosys-smt2-wire state 4
(define-fun |Rx_top_n state| ((state |Rx_top_s|)) (_ BitVec 4) (|Rx_top#5| state))
(define-fun |Rx_top_a| ((state |Rx_top_s|)) Bool (and
  (|RxUART_a| (|Rx_top_h rx| state))
  (|check_parity_a| (|Rx_top_h cp| state))
  (|synchronizer_a| (|Rx_top_h sync| state))
))
(define-fun |Rx_top_u| ((state |Rx_top_s|)) Bool (and
  (|RxUART_u| (|Rx_top_h rx| state))
  (|check_parity_u| (|Rx_top_h cp| state))
  (|synchronizer_u| (|Rx_top_h sync| state))
))
(define-fun |Rx_top_i| ((state |Rx_top_s|)) Bool (and
  (|RxUART_i| (|Rx_top_h rx| state))
  (|check_parity_i| (|Rx_top_h cp| state))
  (|synchronizer_i| (|Rx_top_h sync| state))
))
(define-fun |Rx_top_h| ((state |Rx_top_s|)) Bool (and
  (= (|Rx_top_is| state) (|RxUART_is| (|Rx_top_h rx| state)))
  (= (|Rx_top#0| state) (|RxUART_n clk| (|Rx_top_h rx| state))) ; RxUART.clk
  (= (|Rx_top#1| state) (|RxUART_n data_is_available| (|Rx_top_h rx| state))) ; RxUART.data_is_available
  (= (|Rx_top#2| state) (|RxUART_n data_is_valid| (|Rx_top_h rx| state))) ; RxUART.data_is_valid
  (= (|Rx_top#3| state) (|RxUART_n is_parity_stage| (|Rx_top_h rx| state))) ; RxUART.is_parity_stage
  (= (|Rx_top#4| state) (|RxUART_n received_data| (|Rx_top_h rx| state))) ; RxUART.received_data
  (= (|Rx_top#6| state) (|RxUART_n reset| (|Rx_top_h rx| state))) ; RxUART.reset
  (= (|Rx_top#9| state) (|RxUART_n serial_in_synced| (|Rx_top_h rx| state))) ; RxUART.serial_in_synced
  (= (|Rx_top#5| state) (|RxUART_n state| (|Rx_top_h rx| state))) ; RxUART.state
  (= (|Rx_top_is| state) (|check_parity_is| (|Rx_top_h cp| state)))
  (= (|Rx_top#0| state) (|check_parity_n clk| (|Rx_top_h cp| state))) ; check_parity.clk
  (= (|Rx_top#3| state) (|check_parity_n is_parity_stage| (|Rx_top_h cp| state))) ; check_parity.is_parity_stage
  (= (|Rx_top#4| state) (|check_parity_n received_data| (|Rx_top_h cp| state))) ; check_parity.received_data
  (= (|Rx_top#7| state) (|check_parity_n rx_error| (|Rx_top_h cp| state))) ; check_parity.rx_error
  (= (|Rx_top#9| state) (|check_parity_n serial_in_synced| (|Rx_top_h cp| state))) ; check_parity.serial_in_synced
  (= (|Rx_top_is| state) (|synchronizer_is| (|Rx_top_h sync| state)))
  (= (|Rx_top#0| state) (|synchronizer_n clk| (|Rx_top_h sync| state))) ; synchronizer.clk
  (= (|Rx_top#8| state) (|synchronizer_n serial_in| (|Rx_top_h sync| state))) ; synchronizer.serial_in
  (= (|Rx_top#9| state) (|synchronizer_n serial_in_synced| (|Rx_top_h sync| state))) ; synchronizer.serial_in_synced
  (|RxUART_h| (|Rx_top_h rx| state))
  (|check_parity_h| (|Rx_top_h cp| state))
  (|synchronizer_h| (|Rx_top_h sync| state))
))
(define-fun |Rx_top_t| ((state |Rx_top_s|) (next_state |Rx_top_s|)) Bool (and
  (|RxUART_t| (|Rx_top_h rx| state) (|Rx_top_h rx| next_state))
  (|check_parity_t| (|Rx_top_h cp| state) (|Rx_top_h cp| next_state))
  (|synchronizer_t| (|Rx_top_h sync| state) (|Rx_top_h sync| next_state))
)) ; end of module Rx_top
; yosys-smt2-module UART
(declare-sort |UART_s| 0)
(declare-fun |UART_is| (|UART_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |UART#0| (|UART_s|) Bool) ; \clk
(define-fun |UART_n clk| ((state |UART_s|)) Bool (|UART#0| state))
; yosys-smt2-output data_is_valid 1
; yosys-smt2-wire data_is_valid 1
; yosys-smt2-cell Rx_top rx
(declare-fun |UART#1| (|UART_s|) Bool) ; \data_is_valid
(declare-fun |UART#2| (|UART_s|) (_ BitVec 8)) ; \received_data
(declare-fun |UART#3| (|UART_s|) Bool) ; \rx_error
(declare-fun |UART#4| (|UART_s|) (_ BitVec 4)) ; \state
(declare-fun |UART_h rx| (|UART_s|) |Rx_top_s|)
(define-fun |UART_n data_is_valid| ((state |UART_s|)) Bool (|UART#1| state))
; yosys-smt2-input enable 1
; yosys-smt2-wire enable 1
(declare-fun |UART#5| (|UART_s|) Bool) ; \enable
(define-fun |UART_n enable| ((state |UART_s|)) Bool (|UART#5| state))
; yosys-smt2-input i_data 8
; yosys-smt2-wire i_data 8
(declare-fun |UART#6| (|UART_s|) (_ BitVec 8)) ; \i_data
(define-fun |UART_n i_data| ((state |UART_s|)) (_ BitVec 8) (|UART#6| state))
; yosys-smt2-output o_busy 1
; yosys-smt2-wire o_busy 1
; yosys-smt2-cell Tx_top tx
(declare-fun |UART#7| (|UART_s|) Bool) ; \o_busy
(declare-fun |UART#8| (|UART_s|) Bool) ; \serial_out
(declare-fun |UART_h tx| (|UART_s|) |Tx_top_s|)
(define-fun |UART_n o_busy| ((state |UART_s|)) Bool (|UART#7| state))
; yosys-smt2-output received_data 8
; yosys-smt2-wire received_data 8
(define-fun |UART_n received_data| ((state |UART_s|)) (_ BitVec 8) (|UART#2| state))
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
(declare-fun |UART#9| (|UART_s|) Bool) ; \reset
(define-fun |UART_n reset| ((state |UART_s|)) Bool (|UART#9| state))
; yosys-smt2-output rx_error 1
; yosys-smt2-wire rx_error 1
(define-fun |UART_n rx_error| ((state |UART_s|)) Bool (|UART#3| state))
; yosys-smt2-input serial_in 1
; yosys-smt2-wire serial_in 1
(declare-fun |UART#10| (|UART_s|) Bool) ; \serial_in
(define-fun |UART_n serial_in| ((state |UART_s|)) Bool (|UART#10| state))
; yosys-smt2-output serial_out 1
; yosys-smt2-wire serial_out 1
(define-fun |UART_n serial_out| ((state |UART_s|)) Bool (|UART#8| state))
; yosys-smt2-output state 4
; yosys-smt2-wire state 4
(define-fun |UART_n state| ((state |UART_s|)) (_ BitVec 4) (|UART#4| state))
(define-fun |UART_a| ((state |UART_s|)) Bool (and
  (|Tx_top_a| (|UART_h tx| state))
  (|Rx_top_a| (|UART_h rx| state))
))
(define-fun |UART_u| ((state |UART_s|)) Bool (and
  (|Tx_top_u| (|UART_h tx| state))
  (|Rx_top_u| (|UART_h rx| state))
))
(define-fun |UART_i| ((state |UART_s|)) Bool (and
  (|Tx_top_i| (|UART_h tx| state))
  (|Rx_top_i| (|UART_h rx| state))
))
(define-fun |UART_h| ((state |UART_s|)) Bool (and
  (= (|UART_is| state) (|Tx_top_is| (|UART_h tx| state)))
  (= (|UART#0| state) (|Tx_top_n clk| (|UART_h tx| state))) ; Tx_top.clk
  (= (|UART#5| state) (|Tx_top_n enable| (|UART_h tx| state))) ; Tx_top.enable
  (= (|UART#6| state) (|Tx_top_n i_data| (|UART_h tx| state))) ; Tx_top.i_data
  (= (|UART#7| state) (|Tx_top_n o_busy| (|UART_h tx| state))) ; Tx_top.o_busy
  (= (|UART#9| state) (|Tx_top_n reset| (|UART_h tx| state))) ; Tx_top.reset
  (= (|UART#8| state) (|Tx_top_n serial_out| (|UART_h tx| state))) ; Tx_top.serial_out
  (= (|UART_is| state) (|Rx_top_is| (|UART_h rx| state)))
  (= (|UART#0| state) (|Rx_top_n clk| (|UART_h rx| state))) ; Rx_top.clk
  (= (|UART#1| state) (|Rx_top_n data_is_valid| (|UART_h rx| state))) ; Rx_top.data_is_valid
  (= (|UART#2| state) (|Rx_top_n received_data| (|UART_h rx| state))) ; Rx_top.received_data
  (= (|UART#9| state) (|Rx_top_n reset| (|UART_h rx| state))) ; Rx_top.reset
  (= (|UART#3| state) (|Rx_top_n rx_error| (|UART_h rx| state))) ; Rx_top.rx_error
  (= (|UART#10| state) (|Rx_top_n serial_in| (|UART_h rx| state))) ; Rx_top.serial_in
  (= (|UART#4| state) (|Rx_top_n state| (|UART_h rx| state))) ; Rx_top.state
  (|Tx_top_h| (|UART_h tx| state))
  (|Rx_top_h| (|UART_h rx| state))
))
(define-fun |UART_t| ((state |UART_s|) (next_state |UART_s|)) Bool (and
  (|Tx_top_t| (|UART_h tx| state) (|UART_h tx| next_state))
  (|Rx_top_t| (|UART_h rx| state) (|UART_h rx| next_state))
)) ; end of module UART
; yosys-smt2-module test_UART
(declare-sort |test_UART_s| 0)
(declare-fun |test_UART_is| (|test_UART_s|) Bool)
; yosys-smt2-register $formal$../rtl/test_UART.v:104$16_CHECK 1
(declare-fun |test_UART#0| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:104$16_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:104$16_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#0| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:104$16_EN 1
(declare-fun |test_UART#1| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:104$16_EN
(define-fun |test_UART_n $formal$../rtl/test_UART.v:104$16_EN| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#1| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:105$17_CHECK 1
(declare-fun |test_UART#2| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:105$17_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:105$17_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#2| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:106$18_CHECK 1
(declare-fun |test_UART#3| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:106$18_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:106$18_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#3| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:107$19_CHECK 1
(declare-fun |test_UART#4| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:107$19_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:107$19_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#4| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:108$20_CHECK 1
(declare-fun |test_UART#5| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:108$20_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:108$20_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#5| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:116$21_CHECK 1
(declare-fun |test_UART#6| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:116$21_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:116$21_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#6| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:116$21_EN 1
(declare-fun |test_UART#7| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:116$21_EN
(define-fun |test_UART_n $formal$../rtl/test_UART.v:116$21_EN| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#7| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:120$22_CHECK 1
(declare-fun |test_UART#8| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:120$22_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:120$22_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#8| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:120$22_EN 1
(declare-fun |test_UART#9| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:120$22_EN
(define-fun |test_UART_n $formal$../rtl/test_UART.v:120$22_EN| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#9| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:121$23_CHECK 1
(declare-fun |test_UART#10| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:121$23_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:121$23_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#10| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:125$24_EN 1
(declare-fun |test_UART#11| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:125$24_EN
(define-fun |test_UART_n $formal$../rtl/test_UART.v:125$24_EN| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#11| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:133$26_CHECK 1
(declare-fun |test_UART#12| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:133$26_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:133$26_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#12| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:133$26_EN 1
(declare-fun |test_UART#13| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:133$26_EN
(define-fun |test_UART_n $formal$../rtl/test_UART.v:133$26_EN| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#13| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:136$27_CHECK 1
(declare-fun |test_UART#14| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:136$27_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:136$27_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#14| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:136$27_EN 1
(declare-fun |test_UART#15| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:136$27_EN
(define-fun |test_UART_n $formal$../rtl/test_UART.v:136$27_EN| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#15| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:137$28_CHECK 1
(declare-fun |test_UART#16| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:137$28_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:137$28_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#16| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:67$2_EN 1
(declare-fun |test_UART#17| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:67$2_EN
(define-fun |test_UART_n $formal$../rtl/test_UART.v:67$2_EN| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#17| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:77$5_EN 1
(declare-fun |test_UART#18| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:77$5_EN
(define-fun |test_UART_n $formal$../rtl/test_UART.v:77$5_EN| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#18| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:78$6_CHECK 1
(declare-fun |test_UART#19| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:78$6_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:78$6_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#19| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:83$8_EN 1
(declare-fun |test_UART#20| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:83$8_EN
(define-fun |test_UART_n $formal$../rtl/test_UART.v:83$8_EN| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#20| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:89$11_CHECK 1
(declare-fun |test_UART#21| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:89$11_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:89$11_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#21| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:89$11_EN 1
(declare-fun |test_UART#22| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:89$11_EN
(define-fun |test_UART_n $formal$../rtl/test_UART.v:89$11_EN| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#22| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:90$12_CHECK 1
(declare-fun |test_UART#23| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:90$12_CHECK
(define-fun |test_UART_n $formal$../rtl/test_UART.v:90$12_CHECK| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#23| state)) #b1))
; yosys-smt2-register $formal$../rtl/test_UART.v:97$14_EN 1
(declare-fun |test_UART#24| (|test_UART_s|) (_ BitVec 1)) ; $formal$../rtl/test_UART.v:97$14_EN
(define-fun |test_UART_n $formal$../rtl/test_UART.v:97$14_EN| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#24| state)) #b1))
; yosys-smt2-register $past$../rtl/test_UART.v:120$1$0 8
(declare-fun |test_UART#25| (|test_UART_s|) (_ BitVec 8)) ; $past$../rtl/test_UART.v:120$1$0
(define-fun |test_UART_n $past$../rtl/test_UART.v:120$1$0| ((state |test_UART_s|)) (_ BitVec 8) (|test_UART#25| state))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |test_UART#26| (|test_UART_s|) Bool) ; \clk
(define-fun |test_UART_n clk| ((state |test_UART_s|)) Bool (|test_UART#26| state))
; yosys-smt2-register cnt 7
; yosys-smt2-wire cnt 7
(declare-fun |test_UART#27| (|test_UART_s|) (_ BitVec 7)) ; \cnt
(define-fun |test_UART_n cnt| ((state |test_UART_s|)) (_ BitVec 7) (|test_UART#27| state))
; yosys-smt2-output data_is_valid 1
; yosys-smt2-wire data_is_valid 1
; yosys-smt2-cell UART uart
(declare-fun |test_UART#28| (|test_UART_s|) Bool) ; \data_is_valid
(declare-fun |test_UART#29| (|test_UART_s|) Bool) ; \o_busy
(declare-fun |test_UART#30| (|test_UART_s|) (_ BitVec 8)) ; \received_data
(declare-fun |test_UART#31| (|test_UART_s|) Bool) ; \rx_error
(declare-fun |test_UART#32| (|test_UART_s|) Bool) ; \serial_out
(declare-fun |test_UART#33| (|test_UART_s|) (_ BitVec 4)) ; \state
(declare-fun |test_UART_h uart| (|test_UART_s|) |UART_s|)
(define-fun |test_UART_n data_is_valid| ((state |test_UART_s|)) Bool (|test_UART#28| state))
; yosys-smt2-input enable 1
; yosys-smt2-wire enable 1
(declare-fun |test_UART#34| (|test_UART_s|) Bool) ; \enable
(define-fun |test_UART_n enable| ((state |test_UART_s|)) Bool (|test_UART#34| state))
; yosys-smt2-register has_been_enabled 1
; yosys-smt2-wire has_been_enabled 1
(declare-fun |test_UART#35| (|test_UART_s|) (_ BitVec 1)) ; \has_been_enabled
(define-fun |test_UART_n has_been_enabled| ((state |test_UART_s|)) Bool (= ((_ extract 0 0) (|test_UART#35| state)) #b1))
; yosys-smt2-input i_data 8
; yosys-smt2-wire i_data 8
(declare-fun |test_UART#36| (|test_UART_s|) (_ BitVec 8)) ; \i_data
(define-fun |test_UART_n i_data| ((state |test_UART_s|)) (_ BitVec 8) (|test_UART#36| state))
; yosys-smt2-output o_busy 1
; yosys-smt2-wire o_busy 1
(define-fun |test_UART_n o_busy| ((state |test_UART_s|)) Bool (|test_UART#29| state))
; yosys-smt2-output received_data 8
; yosys-smt2-wire received_data 8
(define-fun |test_UART_n received_data| ((state |test_UART_s|)) (_ BitVec 8) (|test_UART#30| state))
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
(declare-fun |test_UART#37| (|test_UART_s|) Bool) ; \reset
(define-fun |test_UART_n reset| ((state |test_UART_s|)) Bool (|test_UART#37| state))
; yosys-smt2-output rx_error 1
; yosys-smt2-wire rx_error 1
(define-fun |test_UART_n rx_error| ((state |test_UART_s|)) Bool (|test_UART#31| state))
; yosys-smt2-wire serial_in 1
(define-fun |test_UART_n serial_in| ((state |test_UART_s|)) Bool (|test_UART#32| state))
; yosys-smt2-output serial_out 1
; yosys-smt2-wire serial_out 1
(define-fun |test_UART_n serial_out| ((state |test_UART_s|)) Bool (|test_UART#32| state))
; yosys-smt2-wire state 4
(define-fun |test_UART_n state| ((state |test_UART_s|)) (_ BitVec 4) (|test_UART#33| state))
; yosys-smt2-assert 0 ../rtl/test_UART.v:104
(define-fun |test_UART_a 0| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#0| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#1| state)) #b1)))) ; $assert$../rtl/test_UART.v:104$135
; yosys-smt2-assert 1 ../rtl/test_UART.v:105
(define-fun |test_UART_a 1| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#2| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#1| state)) #b1)))) ; $assert$../rtl/test_UART.v:105$136
; yosys-smt2-assert 2 ../rtl/test_UART.v:106
(define-fun |test_UART_a 2| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#3| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#1| state)) #b1)))) ; $assert$../rtl/test_UART.v:106$137
; yosys-smt2-assert 3 ../rtl/test_UART.v:107
(define-fun |test_UART_a 3| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#4| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#1| state)) #b1)))) ; $assert$../rtl/test_UART.v:107$138
; yosys-smt2-assert 4 ../rtl/test_UART.v:108
(define-fun |test_UART_a 4| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#5| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#1| state)) #b1)))) ; $assert$../rtl/test_UART.v:108$139
; yosys-smt2-assert 5 ../rtl/test_UART.v:121
(define-fun |test_UART_a 5| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#10| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#9| state)) #b1)))) ; $assert$../rtl/test_UART.v:121$142
; yosys-smt2-assert 6 ../rtl/test_UART.v:125
(define-fun |test_UART_a 6| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#5| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#11| state)) #b1)))) ; $assert$../rtl/test_UART.v:125$143
; yosys-smt2-assert 7 ../rtl/test_UART.v:126
(define-fun |test_UART_a 7| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#4| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#11| state)) #b1)))) ; $assert$../rtl/test_UART.v:126$144
; yosys-smt2-assert 8 ../rtl/test_UART.v:133
(define-fun |test_UART_a 8| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#12| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#13| state)) #b1)))) ; $assert$../rtl/test_UART.v:133$145
; yosys-smt2-assert 9 ../rtl/test_UART.v:136
(define-fun |test_UART_a 9| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#14| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#15| state)) #b1)))) ; $assert$../rtl/test_UART.v:136$146
; yosys-smt2-assert 10 ../rtl/test_UART.v:137
(define-fun |test_UART_a 10| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#16| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#15| state)) #b1)))) ; $assert$../rtl/test_UART.v:137$147
; yosys-smt2-assert 11 ../rtl/test_UART.v:67
(define-fun |test_UART_a 11| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#0| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#17| state)) #b1)))) ; $assert$../rtl/test_UART.v:67$121
; yosys-smt2-assert 12 ../rtl/test_UART.v:69
(define-fun |test_UART_a 12| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#3| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#17| state)) #b1)))) ; $assert$../rtl/test_UART.v:69$122
; yosys-smt2-assert 13 ../rtl/test_UART.v:70
(define-fun |test_UART_a 13| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#4| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#17| state)) #b1)))) ; $assert$../rtl/test_UART.v:70$123
; yosys-smt2-assert 14 ../rtl/test_UART.v:77
(define-fun |test_UART_a 14| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#3| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#18| state)) #b1)))) ; $assert$../rtl/test_UART.v:77$124
; yosys-smt2-assert 15 ../rtl/test_UART.v:78
(define-fun |test_UART_a 15| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#19| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#18| state)) #b1)))) ; $assert$../rtl/test_UART.v:78$125
; yosys-smt2-assert 16 ../rtl/test_UART.v:79
(define-fun |test_UART_a 16| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#10| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#18| state)) #b1)))) ; $assert$../rtl/test_UART.v:79$126
; yosys-smt2-assert 17 ../rtl/test_UART.v:83
(define-fun |test_UART_a 17| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#3| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#20| state)) #b1)))) ; $assert$../rtl/test_UART.v:83$127
; yosys-smt2-assert 18 ../rtl/test_UART.v:84
(define-fun |test_UART_a 18| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#4| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#20| state)) #b1)))) ; $assert$../rtl/test_UART.v:84$128
; yosys-smt2-assert 19 ../rtl/test_UART.v:85
(define-fun |test_UART_a 19| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#10| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#20| state)) #b1)))) ; $assert$../rtl/test_UART.v:85$129
; yosys-smt2-assert 20 ../rtl/test_UART.v:89
(define-fun |test_UART_a 20| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#21| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#22| state)) #b1)))) ; $assert$../rtl/test_UART.v:89$130
; yosys-smt2-assert 21 ../rtl/test_UART.v:90
(define-fun |test_UART_a 21| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#23| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#22| state)) #b1)))) ; $assert$../rtl/test_UART.v:90$131
; yosys-smt2-assert 22 ../rtl/test_UART.v:91
(define-fun |test_UART_a 22| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#4| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#22| state)) #b1)))) ; $assert$../rtl/test_UART.v:91$132
; yosys-smt2-assert 23 ../rtl/test_UART.v:97
(define-fun |test_UART_a 23| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#3| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#24| state)) #b1)))) ; $assert$../rtl/test_UART.v:97$133
; yosys-smt2-assert 24 ../rtl/test_UART.v:98
(define-fun |test_UART_a 24| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#10| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#24| state)) #b1)))) ; $assert$../rtl/test_UART.v:98$134
; yosys-smt2-assume 0 ../rtl/test_UART.v:116
(define-fun |test_UART_u 0| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#6| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#7| state)) #b1)))) ; $assume$../rtl/test_UART.v:116$140
; yosys-smt2-assume 1 ../rtl/test_UART.v:120
(define-fun |test_UART_u 1| ((state |test_UART_s|)) Bool (or (= ((_ extract 0 0) (|test_UART#8| state)) #b1) (not (= ((_ extract 0 0) (|test_UART#9| state)) #b1)))) ; $assume$../rtl/test_UART.v:120$141
(define-fun |test_UART#38| ((state |test_UART_s|)) Bool (= (|test_UART#27| state) #b1111000)) ; $eq$../rtl/test_UART.v:88$82_Y
(define-fun |test_UART#39| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#38| state) #b0 #b1)) ; $procmux$758_Y
(define-fun |test_UART#40| ((state |test_UART_s|)) Bool (= (|test_UART#27| state) #b1100000)) ; $eq$../rtl/test_UART.v:82$78_Y
(define-fun |test_UART#41| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#40| state) #b1 (|test_UART#39| state))) ; $procmux$941_Y
(define-fun |test_UART#42| ((state |test_UART_s|)) Bool (= (|test_UART#27| state) #b0001000)) ; $eq$../rtl/test_UART.v:76$74_Y
(define-fun |test_UART#43| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#42| state) #b1 (|test_UART#41| state))) ; $procmux$944_Y
(define-fun |test_UART#44| ((state |test_UART_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|test_UART#35| state)) #b1) (|test_UART#43| state) #b0)) ; $procmux$946_Y
(define-fun |test_UART#45| ((state |test_UART_s|)) Bool (not (or  (= ((_ extract 0 0) (|test_UART#35| state)) #b1) false))) ; $logic_not$../rtl/test_UART.v:65$68_Y
(define-fun |test_UART#46| ((state |test_UART_s|)) Bool (and (or  (|test_UART#34| state) false) (or  (|test_UART#45| state) false))) ; $logic_and$../rtl/test_UART.v:65$69_Y
(define-fun |test_UART#47| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#46| state) #b1 (|test_UART#44| state))) ; $procmux$949_Y
(define-fun |test_UART#48| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#37| state) #b0 (|test_UART#47| state))) ; $0\has_been_enabled[0:0]
(define-fun |test_UART#49| ((state |test_UART_s|)) (_ BitVec 7) (bvadd (|test_UART#27| state) #b0000001)) ; $add$../rtl/test_UART.v:74$73_Y
(define-fun |test_UART#50| ((state |test_UART_s|)) (_ BitVec 7) (ite (|test_UART#38| state) #b0000000 (|test_UART#49| state))) ; $procmux$920_Y
(define-fun |test_UART#51| ((state |test_UART_s|)) (_ BitVec 7) (ite (|test_UART#40| state) (|test_UART#49| state) (|test_UART#50| state))) ; $procmux$923_Y
(define-fun |test_UART#52| ((state |test_UART_s|)) (_ BitVec 7) (ite (|test_UART#42| state) (|test_UART#49| state) (|test_UART#51| state))) ; $procmux$926_Y
(define-fun |test_UART#53| ((state |test_UART_s|)) (_ BitVec 7) (ite (= ((_ extract 0 0) (|test_UART#35| state)) #b1) (|test_UART#52| state) #b0000000)) ; $procmux$928_Y
(define-fun |test_UART#54| ((state |test_UART_s|)) (_ BitVec 7) (ite (|test_UART#46| state) #b0000000 (|test_UART#53| state))) ; $procmux$931_Y
(define-fun |test_UART#55| ((state |test_UART_s|)) (_ BitVec 7) (ite (|test_UART#37| state) #b0000000 (|test_UART#54| state))) ; $0\cnt[6:0]
(define-fun |test_UART#56| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#40| state) #b0 (|test_UART#39| state))) ; $procmux$761_Y
(define-fun |test_UART#57| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#42| state) #b0 (|test_UART#56| state))) ; $procmux$764_Y
(define-fun |test_UART#58| ((state |test_UART_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|test_UART#35| state)) #b1) (|test_UART#57| state) #b0)) ; $procmux$766_Y
(define-fun |test_UART#59| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#46| state) #b0 (|test_UART#58| state))) ; $procmux$769_Y
(define-fun |test_UART#60| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#37| state) #b0 (|test_UART#59| state))) ; $0$formal$../rtl/test_UART.v:97$14_EN[0:0]$55
(define-fun |test_UART#61| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#38| state) #b1 #b0)) ; $procmux$650_Y
(define-fun |test_UART#62| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#40| state) #b0 (|test_UART#61| state))) ; $procmux$653_Y
(define-fun |test_UART#63| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#42| state) #b0 (|test_UART#62| state))) ; $procmux$656_Y
(define-fun |test_UART#64| ((state |test_UART_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|test_UART#35| state)) #b1) (|test_UART#63| state) #b0)) ; $procmux$658_Y
(define-fun |test_UART#65| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#46| state) #b0 (|test_UART#64| state))) ; $procmux$661_Y
(define-fun |test_UART#66| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#37| state) #b0 (|test_UART#65| state))) ; $0$formal$../rtl/test_UART.v:89$11_EN[0:0]$49
(define-fun |test_UART#67| ((state |test_UART_s|)) Bool (= (|test_UART#33| state) #b1011)) ; $0$formal$../rtl/test_UART.v:89$11_CHECK[0:0]$48
(define-fun |test_UART#68| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#40| state) #b1 #b0)) ; $procmux$560_Y
(define-fun |test_UART#69| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#42| state) #b0 (|test_UART#68| state))) ; $procmux$563_Y
(define-fun |test_UART#70| ((state |test_UART_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|test_UART#35| state)) #b1) (|test_UART#69| state) #b0)) ; $procmux$565_Y
(define-fun |test_UART#71| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#46| state) #b0 (|test_UART#70| state))) ; $procmux$568_Y
(define-fun |test_UART#72| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#37| state) #b0 (|test_UART#71| state))) ; $0$formal$../rtl/test_UART.v:83$8_EN[0:0]$43
(define-fun |test_UART#73| ((state |test_UART_s|)) (_ BitVec 1) (bvnot (ite (|test_UART#32| state) #b1 #b0))) ; $0$formal$../rtl/test_UART.v:78$6_CHECK[0:0]$38
(define-fun |test_UART#74| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#42| state) #b1 #b0)) ; $procmux$488_Y
(define-fun |test_UART#75| ((state |test_UART_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|test_UART#35| state)) #b1) (|test_UART#74| state) #b0)) ; $procmux$490_Y
(define-fun |test_UART#76| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#46| state) #b0 (|test_UART#75| state))) ; $procmux$493_Y
(define-fun |test_UART#77| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#37| state) #b0 (|test_UART#76| state))) ; $0$formal$../rtl/test_UART.v:77$5_EN[0:0]$37
(define-fun |test_UART#78| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#46| state) #b1 #b0)) ; $procmux$451_Y
(define-fun |test_UART#79| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#37| state) #b0 (|test_UART#78| state))) ; $0$formal$../rtl/test_UART.v:67$2_EN[0:0]$31
(define-fun |test_UART#80| ((state |test_UART_s|)) Bool (bvult (|test_UART#27| state) #b1011000)) ; $0$formal$../rtl/test_UART.v:137$28_CHECK[0:0]$116
(define-fun |test_UART#81| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#28| state) #b1 #b0)) ; $0$formal$../rtl/test_UART.v:136$27_EN[0:0]$115
(define-fun |test_UART#82| ((state |test_UART_s|)) Bool (= (|test_UART#30| state) (|test_UART#36| state))) ; $0$formal$../rtl/test_UART.v:136$27_CHECK[0:0]$114
(define-fun |test_UART#83| ((state |test_UART_s|)) Bool (not (or  (|test_UART#31| state) false))) ; $0$formal$../rtl/test_UART.v:133$26_CHECK[0:0]$112
(define-fun |test_UART#84| ((state |test_UART_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|test_UART#35| state)) #b1) #b0 #b1)) ; $procmux$427_Y
(define-fun |test_UART#85| ((state |test_UART_s|)) (_ BitVec 1) (bvor (ite (|test_UART#37| state) #b1 #b0) (ite (|test_UART#29| state) #b1 #b0))) ; $or$../rtl/test_UART.v:115$105_Y
(define-fun |test_UART#86| ((state |test_UART_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|test_UART#85| state)) #b1) #b0 (|test_UART#84| state))) ; $0$formal$../rtl/test_UART.v:125$24_EN[0:0]$102
(define-fun |test_UART#87| ((state |test_UART_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|test_UART#35| state)) #b1) #b1 #b0)) ; $procmux$403_Y
(define-fun |test_UART#88| ((state |test_UART_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|test_UART#85| state)) #b1) #b0 (|test_UART#87| state))) ; $0$formal$../rtl/test_UART.v:120$22_EN[0:0]$98
(define-fun |test_UART#89| ((state |test_UART_s|)) Bool (= (|test_UART#25| state) (|test_UART#36| state))) ; $0$formal$../rtl/test_UART.v:120$22_CHECK[0:0]$97
(define-fun |test_UART#90| ((state |test_UART_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|test_UART#85| state)) #b1) #b1 #b0)) ; $0$formal$../rtl/test_UART.v:116$21_EN[0:0]$96
(define-fun |test_UART#91| ((state |test_UART_s|)) (_ BitVec 1) (bvnot (ite (|test_UART#34| state) #b1 #b0))) ; $0$formal$../rtl/test_UART.v:116$21_CHECK[0:0]$95
(define-fun |test_UART#92| ((state |test_UART_s|)) (_ BitVec 1) (bvnot (ite (|test_UART#29| state) #b1 #b0))) ; $0$formal$../rtl/test_UART.v:108$20_CHECK[0:0]$66
(define-fun |test_UART#93| ((state |test_UART_s|)) (_ BitVec 1) (bvnot (ite (|test_UART#28| state) #b1 #b0))) ; $0$formal$../rtl/test_UART.v:106$18_CHECK[0:0]$62
(define-fun |test_UART#94| ((state |test_UART_s|)) Bool (not (or  (= ((_ extract 0 0) (|test_UART#33| state)) #b1) (= ((_ extract 1 1) (|test_UART#33| state)) #b1) (= ((_ extract 2 2) (|test_UART#33| state)) #b1) (= ((_ extract 3 3) (|test_UART#33| state)) #b1)))) ; $0$formal$../rtl/test_UART.v:105$17_CHECK[0:0]$60
(define-fun |test_UART#95| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#46| state) #b0 (|test_UART#84| state))) ; $procmux$832_Y
(define-fun |test_UART#96| ((state |test_UART_s|)) (_ BitVec 1) (ite (|test_UART#37| state) #b0 (|test_UART#95| state))) ; $0$formal$../rtl/test_UART.v:104$16_EN[0:0]$59
(define-fun |test_UART#97| ((state |test_UART_s|)) Bool (not (or  (= ((_ extract 0 0) (|test_UART#27| state)) #b1) (= ((_ extract 1 1) (|test_UART#27| state)) #b1) (= ((_ extract 2 2) (|test_UART#27| state)) #b1) (= ((_ extract 3 3) (|test_UART#27| state)) #b1) (= ((_ extract 4 4) (|test_UART#27| state)) #b1) (= ((_ extract 5 5) (|test_UART#27| state)) #b1) (= ((_ extract 6 6) (|test_UART#27| state)) #b1)))) ; $0$formal$../rtl/test_UART.v:104$16_CHECK[0:0]$58
(define-fun |test_UART_a| ((state |test_UART_s|)) Bool (and
  (|test_UART_a 0| state)
  (|test_UART_a 1| state)
  (|test_UART_a 2| state)
  (|test_UART_a 3| state)
  (|test_UART_a 4| state)
  (|test_UART_a 5| state)
  (|test_UART_a 6| state)
  (|test_UART_a 7| state)
  (|test_UART_a 8| state)
  (|test_UART_a 9| state)
  (|test_UART_a 10| state)
  (|test_UART_a 11| state)
  (|test_UART_a 12| state)
  (|test_UART_a 13| state)
  (|test_UART_a 14| state)
  (|test_UART_a 15| state)
  (|test_UART_a 16| state)
  (|test_UART_a 17| state)
  (|test_UART_a 18| state)
  (|test_UART_a 19| state)
  (|test_UART_a 20| state)
  (|test_UART_a 21| state)
  (|test_UART_a 22| state)
  (|test_UART_a 23| state)
  (|test_UART_a 24| state)
  (|UART_a| (|test_UART_h uart| state))
))
(define-fun |test_UART_u| ((state |test_UART_s|)) Bool (and
  (|test_UART_u 0| state)
  (|test_UART_u 1| state)
  (|UART_u| (|test_UART_h uart| state))
))
(define-fun |test_UART_i| ((state |test_UART_s|)) Bool (and
  (= (= ((_ extract 0 0) (|test_UART#1| state)) #b1) false) ; $formal$../rtl/test_UART.v:104$16_EN
  (= (= ((_ extract 0 0) (|test_UART#7| state)) #b1) false) ; $formal$../rtl/test_UART.v:116$21_EN
  (= (= ((_ extract 0 0) (|test_UART#9| state)) #b1) false) ; $formal$../rtl/test_UART.v:120$22_EN
  (= (= ((_ extract 0 0) (|test_UART#11| state)) #b1) false) ; $formal$../rtl/test_UART.v:125$24_EN
  (= (= ((_ extract 0 0) (|test_UART#13| state)) #b1) false) ; $formal$../rtl/test_UART.v:133$26_EN
  (= (= ((_ extract 0 0) (|test_UART#15| state)) #b1) false) ; $formal$../rtl/test_UART.v:136$27_EN
  (= (= ((_ extract 0 0) (|test_UART#17| state)) #b1) false) ; $formal$../rtl/test_UART.v:67$2_EN
  (= (= ((_ extract 0 0) (|test_UART#18| state)) #b1) false) ; $formal$../rtl/test_UART.v:77$5_EN
  (= (= ((_ extract 0 0) (|test_UART#20| state)) #b1) false) ; $formal$../rtl/test_UART.v:83$8_EN
  (= (= ((_ extract 0 0) (|test_UART#22| state)) #b1) false) ; $formal$../rtl/test_UART.v:89$11_EN
  (= (= ((_ extract 0 0) (|test_UART#24| state)) #b1) false) ; $formal$../rtl/test_UART.v:97$14_EN
  (= (|test_UART#27| state) #b0000000) ; cnt
  (= (= ((_ extract 0 0) (|test_UART#35| state)) #b1) false) ; has_been_enabled
  (|UART_i| (|test_UART_h uart| state))
))
(define-fun |test_UART_h| ((state |test_UART_s|)) Bool (and
  (= (|test_UART_is| state) (|UART_is| (|test_UART_h uart| state)))
  (= (|test_UART#26| state) (|UART_n clk| (|test_UART_h uart| state))) ; UART.clk
  (= (|test_UART#28| state) (|UART_n data_is_valid| (|test_UART_h uart| state))) ; UART.data_is_valid
  (= (|test_UART#34| state) (|UART_n enable| (|test_UART_h uart| state))) ; UART.enable
  (= (|test_UART#36| state) (|UART_n i_data| (|test_UART_h uart| state))) ; UART.i_data
  (= (|test_UART#29| state) (|UART_n o_busy| (|test_UART_h uart| state))) ; UART.o_busy
  (= (|test_UART#30| state) (|UART_n received_data| (|test_UART_h uart| state))) ; UART.received_data
  (= (|test_UART#37| state) (|UART_n reset| (|test_UART_h uart| state))) ; UART.reset
  (= (|test_UART#31| state) (|UART_n rx_error| (|test_UART_h uart| state))) ; UART.rx_error
  (= (|test_UART#32| state) (|UART_n serial_in| (|test_UART_h uart| state))) ; UART.serial_in
  (= (|test_UART#32| state) (|UART_n serial_out| (|test_UART_h uart| state))) ; UART.serial_out
  (= (|test_UART#33| state) (|UART_n state| (|test_UART_h uart| state))) ; UART.state
  (|UART_h| (|test_UART_h uart| state))
))
(define-fun |test_UART_t| ((state |test_UART_s|) (next_state |test_UART_s|)) Bool (and
  (= (|test_UART#48| state) (|test_UART#35| next_state)) ; $procdff$999 \has_been_enabled
  (= (|test_UART#55| state) (|test_UART#27| next_state)) ; $procdff$1000 \cnt
  (= (|test_UART#36| state) (|test_UART#25| next_state)) ; $procdff$988 $past$../rtl/test_UART.v:120$1$0
  (= (|test_UART#60| state) (|test_UART#24| next_state)) ; $procdff$1026 $formal$../rtl/test_UART.v:97$14_EN
  (= (ite (|test_UART#28| state) #b1 #b0) (|test_UART#23| next_state)) ; $procdff$1021 $formal$../rtl/test_UART.v:90$12_CHECK
  (= (|test_UART#66| state) (|test_UART#22| next_state)) ; $procdff$1020 $formal$../rtl/test_UART.v:89$11_EN
  (= (ite (|test_UART#67| state) #b1 #b0) (|test_UART#21| next_state)) ; $procdff$1019 $formal$../rtl/test_UART.v:89$11_CHECK
  (= (|test_UART#72| state) (|test_UART#20| next_state)) ; $procdff$1016 $formal$../rtl/test_UART.v:83$8_EN
  (= (|test_UART#73| state) (|test_UART#19| next_state)) ; $procdff$1009 $formal$../rtl/test_UART.v:78$6_CHECK
  (= (|test_UART#77| state) (|test_UART#18| next_state)) ; $procdff$1008 $formal$../rtl/test_UART.v:77$5_EN
  (= (|test_UART#79| state) (|test_UART#17| next_state)) ; $procdff$1002 $formal$../rtl/test_UART.v:67$2_EN
  (= (ite (|test_UART#80| state) #b1 #b0) (|test_UART#16| next_state)) ; $procdff$986 $formal$../rtl/test_UART.v:137$28_CHECK
  (= (|test_UART#81| state) (|test_UART#15| next_state)) ; $procdff$985 $formal$../rtl/test_UART.v:136$27_EN
  (= (ite (|test_UART#82| state) #b1 #b0) (|test_UART#14| next_state)) ; $procdff$984 $formal$../rtl/test_UART.v:136$27_CHECK
  (= #b1 (|test_UART#13| next_state)) ; $procdff$983 $formal$../rtl/test_UART.v:133$26_EN
  (= (ite (|test_UART#83| state) #b1 #b0) (|test_UART#12| next_state)) ; $procdff$982 $formal$../rtl/test_UART.v:133$26_CHECK
  (= (|test_UART#86| state) (|test_UART#11| next_state)) ; $procdff$996 $formal$../rtl/test_UART.v:125$24_EN
  (= (ite (|test_UART#29| state) #b1 #b0) (|test_UART#10| next_state)) ; $procdff$1011 $formal$../rtl/test_UART.v:121$23_CHECK
  (= (|test_UART#88| state) (|test_UART#9| next_state)) ; $procdff$992 $formal$../rtl/test_UART.v:120$22_EN
  (= (ite (|test_UART#89| state) #b1 #b0) (|test_UART#8| next_state)) ; $procdff$991 $formal$../rtl/test_UART.v:120$22_CHECK
  (= (|test_UART#90| state) (|test_UART#7| next_state)) ; $procdff$990 $formal$../rtl/test_UART.v:116$21_EN
  (= (|test_UART#91| state) (|test_UART#6| next_state)) ; $procdff$989 $formal$../rtl/test_UART.v:116$21_CHECK
  (= (|test_UART#92| state) (|test_UART#5| next_state)) ; $procdff$1037 $formal$../rtl/test_UART.v:108$20_CHECK
  (= (ite (|test_UART#32| state) #b1 #b0) (|test_UART#4| next_state)) ; $procdff$1005 $formal$../rtl/test_UART.v:107$19_CHECK
  (= (|test_UART#93| state) (|test_UART#3| next_state)) ; $procdff$1003 $formal$../rtl/test_UART.v:106$18_CHECK
  (= (ite (|test_UART#94| state) #b1 #b0) (|test_UART#2| next_state)) ; $procdff$1031 $formal$../rtl/test_UART.v:105$17_CHECK
  (= (|test_UART#96| state) (|test_UART#1| next_state)) ; $procdff$1030 $formal$../rtl/test_UART.v:104$16_EN
  (= (ite (|test_UART#97| state) #b1 #b0) (|test_UART#0| next_state)) ; $procdff$1001 $formal$../rtl/test_UART.v:104$16_CHECK
  (|UART_t| (|test_UART_h uart| state) (|test_UART_h uart| next_state))
)) ; end of module test_UART
; yosys-smt2-topmod test_UART
; end of yosys output
