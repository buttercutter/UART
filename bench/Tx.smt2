; SMT-LIBv2 description generated by Yosys 0.7+365 (git sha1 4f31cb6d, gcc 7.2.0 -march=x86-64 -mtune=generic -O2 -fstack-protector-strong -fPIC -Os)
; yosys-smt2-module TxUART
(declare-sort |TxUART_s| 0)
(declare-fun |TxUART_is| (|TxUART_s|) Bool)
; yosys-smt2-input baud_clk 1
; yosys-smt2-wire baud_clk 1
(declare-fun |TxUART#0| (|TxUART_s|) Bool) ; \baud_clk
(define-fun |TxUART_n baud_clk| ((state |TxUART_s|)) Bool (|TxUART#0| state))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |TxUART#1| (|TxUART_s|) Bool) ; \clk
(define-fun |TxUART_n clk| ((state |TxUART_s|)) Bool (|TxUART#1| state))
; yosys-smt2-input enable 1
; yosys-smt2-wire enable 1
(declare-fun |TxUART#2| (|TxUART_s|) Bool) ; \enable
(define-fun |TxUART_n enable| ((state |TxUART_s|)) Bool (|TxUART#2| state))
; yosys-smt2-input i_data 8
; yosys-smt2-wire i_data 8
(declare-fun |TxUART#3| (|TxUART_s|) (_ BitVec 8)) ; \i_data
(define-fun |TxUART_n i_data| ((state |TxUART_s|)) (_ BitVec 8) (|TxUART#3| state))
; yosys-smt2-output o_busy 1
; yosys-smt2-wire o_busy 1
(declare-fun |TxUART#4| (|TxUART_s|) (_ BitVec 4)) ; \state
(define-fun |TxUART#5| ((state |TxUART_s|)) Bool (not (or  (= ((_ extract 0 0) (|TxUART#4| state)) #b1) (= ((_ extract 1 1) (|TxUART#4| state)) #b1) (= ((_ extract 2 2) (|TxUART#4| state)) #b1) (= ((_ extract 3 3) (|TxUART#4| state)) #b1)))) ; $eq$../rtl/Tx/TxUART.v:58$40_Y
(define-fun |TxUART#6| ((state |TxUART_s|)) Bool (not (or  (|TxUART#5| state) false))) ; $logic_not$../rtl/Tx/TxUART.v:58$41_Y
(declare-fun |TxUART#7| (|TxUART_s|) (_ BitVec 1)) ; \start_tx
(define-fun |TxUART#8| ((state |TxUART_s|)) (_ BitVec 1) (bvor (ite (|TxUART#6| state) #b1 #b0) (|TxUART#7| state))) ; \o_busy
(define-fun |TxUART_n o_busy| ((state |TxUART_s|)) Bool (= ((_ extract 0 0) (|TxUART#8| state)) #b1))
; yosys-smt2-output start_tx 1
; yosys-smt2-register start_tx 1
; yosys-smt2-wire start_tx 1
(define-fun |TxUART_n start_tx| ((state |TxUART_s|)) Bool (= ((_ extract 0 0) (|TxUART#7| state)) #b1))
; yosys-smt2-register state 4
; yosys-smt2-wire state 4
(define-fun |TxUART_n state| ((state |TxUART_s|)) (_ BitVec 4) (|TxUART#4| state))
(define-fun |TxUART#9| ((state |TxUART_s|)) Bool (= (|TxUART#4| state) #b0001)) ; $eq$../rtl/Tx/TxUART.v:29$36_Y
(define-fun |TxUART#10| ((state |TxUART_s|)) (_ BitVec 1) (ite (|TxUART#9| state) #b0 (|TxUART#7| state))) ; $procmux$130_Y
(define-fun |TxUART#11| ((state |TxUART_s|)) Bool (not (or  (= ((_ extract 0 0) (|TxUART#8| state)) #b1) false))) ; $logic_not$../rtl/Tx/TxUART.v:26$34_Y
(define-fun |TxUART#12| ((state |TxUART_s|)) Bool (and (or  (|TxUART#11| state) false) (or  (|TxUART#2| state) false))) ; $logic_and$../rtl/Tx/TxUART.v:26$35_Y
(define-fun |TxUART#13| ((state |TxUART_s|)) (_ BitVec 1) (ite (|TxUART#12| state) #b1 (|TxUART#10| state))) ; $0\start_tx[0:0]
(define-fun |TxUART#14| ((state |TxUART_s|)) (_ BitVec 4) (bvadd (|TxUART#4| state) #b0001)) ; $add$../rtl/Tx/TxUART.v:47$39_Y
(define-fun |TxUART#15| ((state |TxUART_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|TxUART#7| state)) #b1) #b1 #b0)) ; $auto$wreduce.cc:347:run$153 [0]
(define-fun |TxUART#16| ((state |TxUART_s|)) Bool (= (|TxUART#4| state) #b1010)) ; $procmux$123_CMP
(define-fun |TxUART#17| ((state |TxUART_s|)) Bool (= (|TxUART#4| state) #b1001)) ; $procmux$124_CMP [7]
(define-fun |TxUART#18| ((state |TxUART_s|)) Bool (= (|TxUART#4| state) #b1000)) ; $procmux$124_CMP [6]
(define-fun |TxUART#19| ((state |TxUART_s|)) Bool (= (|TxUART#4| state) #b0111)) ; $procmux$124_CMP [5]
(define-fun |TxUART#20| ((state |TxUART_s|)) Bool (= (|TxUART#4| state) #b0110)) ; $procmux$124_CMP [4]
(define-fun |TxUART#21| ((state |TxUART_s|)) Bool (= (|TxUART#4| state) #b0101)) ; $procmux$124_CMP [3]
(define-fun |TxUART#22| ((state |TxUART_s|)) Bool (= (|TxUART#4| state) #b0100)) ; $procmux$124_CMP [2]
(define-fun |TxUART#23| ((state |TxUART_s|)) Bool (= (|TxUART#4| state) #b0011)) ; $procmux$124_CMP [1]
(define-fun |TxUART#24| ((state |TxUART_s|)) Bool (= (|TxUART#4| state) #b0010)) ; $procmux$124_CMP [0]
(define-fun |TxUART#25| ((state |TxUART_s|)) Bool (or  (|TxUART#17| state) (|TxUART#18| state) (|TxUART#19| state) (|TxUART#20| state) (|TxUART#21| state) (|TxUART#22| state) (|TxUART#23| state) (|TxUART#24| state))) ; $procmux$124_CTRL
(define-fun |TxUART#26| ((state |TxUART_s|)) (_ BitVec 4) (ite (|TxUART#5| state) (concat #b000 (|TxUART#15| state)) (ite (|TxUART#9| state) #b0010 (ite (|TxUART#25| state) (|TxUART#14| state) (ite (|TxUART#16| state) #b1011 #b0000))))) ; $procmux$122_Y
(define-fun |TxUART#27| ((state |TxUART_s|)) (_ BitVec 4) (ite (|TxUART#0| state) (|TxUART#26| state) (|TxUART#4| state))) ; $0\state[3:0]
(define-fun |TxUART_a| ((state |TxUART_s|)) Bool true)
(define-fun |TxUART_u| ((state |TxUART_s|)) Bool true)
(define-fun |TxUART_i| ((state |TxUART_s|)) Bool 
  (= (= ((_ extract 0 0) (|TxUART#7| state)) #b1) false) ; start_tx
)
(define-fun |TxUART_h| ((state |TxUART_s|)) Bool true)
(define-fun |TxUART_t| ((state |TxUART_s|) (next_state |TxUART_s|)) Bool (and
  (= (|TxUART#13| state) (|TxUART#7| next_state)) ; $procdff$147 \start_tx
  (= (|TxUART#27| state) (|TxUART#4| next_state)) ; $procdff$146 \state
)) ; end of module TxUART
; yosys-smt2-module baud_generator
(declare-sort |baud_generator_s| 0)
(declare-fun |baud_generator_is| (|baud_generator_s|) Bool)
; yosys-smt2-output baud_clk 1
; yosys-smt2-wire baud_clk 1
(define-fun |baud_generator_n baud_clk| ((state |baud_generator_s|)) Bool false)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |baud_generator#0| (|baud_generator_s|) Bool) ; \clk
(define-fun |baud_generator_n clk| ((state |baud_generator_s|)) Bool (|baud_generator#0| state))
; yosys-smt2-assert 0 ../rtl/Tx/baud_generator.v:29
(define-fun |baud_generator_a 0| ((state |baud_generator_s|)) Bool (or false (not false))) ; $assert$../rtl/Tx/baud_generator.v:29$57
(define-fun |baud_generator_a| ((state |baud_generator_s|)) Bool 
  (|baud_generator_a 0| state)
)
(define-fun |baud_generator_u| ((state |baud_generator_s|)) Bool true)
(define-fun |baud_generator_i| ((state |baud_generator_s|)) Bool true)
(define-fun |baud_generator_h| ((state |baud_generator_s|)) Bool true)
(define-fun |baud_generator_t| ((state |baud_generator_s|) (next_state |baud_generator_s|)) Bool true) ; end of module baud_generator
; yosys-smt2-module PISO_shift_register
(declare-sort |PISO_shift_register_s| 0)
(declare-fun |PISO_shift_register_is| (|PISO_shift_register_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |PISO_shift_register#0| (|PISO_shift_register_s|) Bool) ; \clk
(define-fun |PISO_shift_register_n clk| ((state |PISO_shift_register_s|)) Bool (|PISO_shift_register#0| state))
; yosys-smt2-input data_in 9
; yosys-smt2-wire data_in 9
(declare-fun |PISO_shift_register#1| (|PISO_shift_register_s|) (_ BitVec 9)) ; \data_in
(define-fun |PISO_shift_register_n data_in| ((state |PISO_shift_register_s|)) (_ BitVec 9) (|PISO_shift_register#1| state))
; yosys-smt2-output data_out 1
; yosys-smt2-register data_out 1
; yosys-smt2-wire data_out 1
(declare-fun |PISO_shift_register#2| (|PISO_shift_register_s|) (_ BitVec 1)) ; \data_out
(define-fun |PISO_shift_register_n data_out| ((state |PISO_shift_register_s|)) Bool (= ((_ extract 0 0) (|PISO_shift_register#2| state)) #b1))
; yosys-smt2-register data_shift_reg 9
; yosys-smt2-wire data_shift_reg 9
(declare-fun |PISO_shift_register#3| (|PISO_shift_register_s|) (_ BitVec 9)) ; \data_shift_reg
(define-fun |PISO_shift_register_n data_shift_reg| ((state |PISO_shift_register_s|)) (_ BitVec 9) (|PISO_shift_register#3| state))
; yosys-smt2-input valid 1
; yosys-smt2-wire valid 1
(declare-fun |PISO_shift_register#4| (|PISO_shift_register_s|) Bool) ; \valid
(define-fun |PISO_shift_register_n valid| ((state |PISO_shift_register_s|)) Bool (|PISO_shift_register#4| state))
(define-fun |PISO_shift_register#5| ((state |PISO_shift_register_s|)) (_ BitVec 9) (ite (|PISO_shift_register#4| state) (|PISO_shift_register#1| state) (concat #b1 ((_ extract 8 1) (|PISO_shift_register#3| state))))) ; $0\data_shift_reg[8:0]
(define-fun |PISO_shift_register#6| ((state |PISO_shift_register_s|)) (_ BitVec 1) (ite (|PISO_shift_register#4| state) #b0 ((_ extract 0 0) (|PISO_shift_register#3| state)))) ; $0\data_out[0:0]
(define-fun |PISO_shift_register_a| ((state |PISO_shift_register_s|)) Bool true)
(define-fun |PISO_shift_register_u| ((state |PISO_shift_register_s|)) Bool true)
(define-fun |PISO_shift_register_i| ((state |PISO_shift_register_s|)) Bool 
  (= (= ((_ extract 0 0) (|PISO_shift_register#2| state)) #b1) true) ; data_out
)
(define-fun |PISO_shift_register_h| ((state |PISO_shift_register_s|)) Bool true)
(define-fun |PISO_shift_register_t| ((state |PISO_shift_register_s|) (next_state |PISO_shift_register_s|)) Bool (and
  (= (|PISO_shift_register#5| state) (|PISO_shift_register#3| next_state)) ; $procdff$145 \data_shift_reg
  (= (|PISO_shift_register#6| state) (|PISO_shift_register#2| next_state)) ; $procdff$144 \data_out
)) ; end of module PISO_shift_register
; yosys-smt2-module Tx_top
(declare-sort |Tx_top_s| 0)
(declare-fun |Tx_top_is| (|Tx_top_s|) Bool)
; yosys-smt2-wire baud_clk 1
; yosys-smt2-cell baud_generator bg
(declare-fun |Tx_top#0| (|Tx_top_s|) Bool) ; \baud_clk
(declare-fun |Tx_top_h bg| (|Tx_top_s|) |baud_generator_s|)
(define-fun |Tx_top_n baud_clk| ((state |Tx_top_s|)) Bool (|Tx_top#0| state))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |Tx_top#1| (|Tx_top_s|) Bool) ; \clk
(define-fun |Tx_top_n clk| ((state |Tx_top_s|)) Bool (|Tx_top#1| state))
; yosys-smt2-wire enable 1
(declare-fun |Tx_top#2| (|Tx_top_s|) Bool) ; \start
(define-fun |Tx_top_n enable| ((state |Tx_top_s|)) Bool (|Tx_top#2| state))
; yosys-smt2-input i_data 8
; yosys-smt2-wire i_data 8
(declare-fun |Tx_top#3| (|Tx_top_s|) (_ BitVec 8)) ; \i_data
(define-fun |Tx_top_n i_data| ((state |Tx_top_s|)) (_ BitVec 8) (|Tx_top#3| state))
; yosys-smt2-output o_busy 1
; yosys-smt2-wire o_busy 1
; yosys-smt2-cell TxUART tx
(declare-fun |Tx_top#4| (|Tx_top_s|) Bool) ; \o_busy
(declare-fun |Tx_top#5| (|Tx_top_s|) Bool) ; \start_tx
(declare-fun |Tx_top_h tx| (|Tx_top_s|) |TxUART_s|)
(define-fun |Tx_top_n o_busy| ((state |Tx_top_s|)) Bool (|Tx_top#4| state))
; yosys-smt2-wire parity_bit 1
(define-fun |Tx_top#6| ((state |Tx_top_s|)) Bool (xor  (= ((_ extract 0 0) (|Tx_top#3| state)) #b1) (= ((_ extract 1 1) (|Tx_top#3| state)) #b1) (= ((_ extract 2 2) (|Tx_top#3| state)) #b1) (= ((_ extract 3 3) (|Tx_top#3| state)) #b1) (= ((_ extract 4 4) (|Tx_top#3| state)) #b1) (= ((_ extract 5 5) (|Tx_top#3| state)) #b1) (= ((_ extract 6 6) (|Tx_top#3| state)) #b1) (= ((_ extract 7 7) (|Tx_top#3| state)) #b1))) ; \parity_bit
(define-fun |Tx_top_n parity_bit| ((state |Tx_top_s|)) Bool (|Tx_top#6| state))
; yosys-smt2-output serial_out 1
; yosys-smt2-wire serial_out 1
; yosys-smt2-cell PISO_shift_register PISO
(declare-fun |Tx_top#7| (|Tx_top_s|) Bool) ; \serial_out
(declare-fun |Tx_top_h PISO| (|Tx_top_s|) |PISO_shift_register_s|)
(define-fun |Tx_top_n serial_out| ((state |Tx_top_s|)) Bool (|Tx_top#7| state))
; yosys-smt2-input start 1
; yosys-smt2-wire start 1
(define-fun |Tx_top_n start| ((state |Tx_top_s|)) Bool (|Tx_top#2| state))
; yosys-smt2-wire start_tx 1
(define-fun |Tx_top_n start_tx| ((state |Tx_top_s|)) Bool (|Tx_top#5| state))
(define-fun |Tx_top_a| ((state |Tx_top_s|)) Bool (and
  (|TxUART_a| (|Tx_top_h tx| state))
  (|baud_generator_a| (|Tx_top_h bg| state))
  (|PISO_shift_register_a| (|Tx_top_h PISO| state))
))
(define-fun |Tx_top_u| ((state |Tx_top_s|)) Bool (and
  (|TxUART_u| (|Tx_top_h tx| state))
  (|baud_generator_u| (|Tx_top_h bg| state))
  (|PISO_shift_register_u| (|Tx_top_h PISO| state))
))
(define-fun |Tx_top_i| ((state |Tx_top_s|)) Bool (and
  (|TxUART_i| (|Tx_top_h tx| state))
  (|baud_generator_i| (|Tx_top_h bg| state))
  (|PISO_shift_register_i| (|Tx_top_h PISO| state))
))
(define-fun |Tx_top_h| ((state |Tx_top_s|)) Bool (and
  (= (|Tx_top_is| state) (|TxUART_is| (|Tx_top_h tx| state)))
  (= (|Tx_top#0| state) (|TxUART_n baud_clk| (|Tx_top_h tx| state))) ; TxUART.baud_clk
  (= (|Tx_top#1| state) (|TxUART_n clk| (|Tx_top_h tx| state))) ; TxUART.clk
  (= (|Tx_top#2| state) (|TxUART_n enable| (|Tx_top_h tx| state))) ; TxUART.enable
  (= (|Tx_top#3| state) (|TxUART_n i_data| (|Tx_top_h tx| state))) ; TxUART.i_data
  (= (|Tx_top#4| state) (|TxUART_n o_busy| (|Tx_top_h tx| state))) ; TxUART.o_busy
  (= (|Tx_top#5| state) (|TxUART_n start_tx| (|Tx_top_h tx| state))) ; TxUART.start_tx
  (= (|Tx_top_is| state) (|baud_generator_is| (|Tx_top_h bg| state)))
  (= (|Tx_top#0| state) (|baud_generator_n baud_clk| (|Tx_top_h bg| state))) ; baud_generator.baud_clk
  (= (|Tx_top#1| state) (|baud_generator_n clk| (|Tx_top_h bg| state))) ; baud_generator.clk
  (= (|Tx_top_is| state) (|PISO_shift_register_is| (|Tx_top_h PISO| state)))
  (= (|Tx_top#0| state) (|PISO_shift_register_n clk| (|Tx_top_h PISO| state))) ; PISO_shift_register.clk
  (= (concat (ite (|Tx_top#6| state) #b1 #b0) (|Tx_top#3| state)) (|PISO_shift_register_n data_in| (|Tx_top_h PISO| state))) ; PISO_shift_register.data_in
  (= (|Tx_top#7| state) (|PISO_shift_register_n data_out| (|Tx_top_h PISO| state))) ; PISO_shift_register.data_out
  (= (|Tx_top#5| state) (|PISO_shift_register_n valid| (|Tx_top_h PISO| state))) ; PISO_shift_register.valid
  (|TxUART_h| (|Tx_top_h tx| state))
  (|baud_generator_h| (|Tx_top_h bg| state))
  (|PISO_shift_register_h| (|Tx_top_h PISO| state))
))
(define-fun |Tx_top_t| ((state |Tx_top_s|) (next_state |Tx_top_s|)) Bool (and
  (|TxUART_t| (|Tx_top_h tx| state) (|Tx_top_h tx| next_state))
  (|baud_generator_t| (|Tx_top_h bg| state) (|Tx_top_h bg| next_state))
  (|PISO_shift_register_t| (|Tx_top_h PISO| state) (|Tx_top_h PISO| next_state))
)) ; end of module Tx_top
; yosys-smt2-topmod Tx_top
; end of yosys output
