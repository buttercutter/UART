
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7+365 (git sha1 4f31cb6d, gcc 7.2.0 -march=x86-64 -mtune=generic -O2 -fstack-protector-strong -fPIC -Os)


-- Running command `read_verilog -formal ../rtl/test_UART.v ../rtl/UART.v ../rtl/Tx/TxUART.v ../rtl/Tx/PISO_shift_register.v ../rtl/Tx/baud_generator.v ../rtl/Tx/Tx_top.v ../rtl/Tx/enable_generator.v ../rtl/Tx/test_Tx_top.v ../rtl/Rx/Rx_top.v ../rtl/Rx/synchronizer.v ../rtl/Rx/RxUART.v ../rtl/Rx/sampling_strobe_generator.v ../rtl/Rx/SIPO_shift_register.v ../rtl/Rx/rx_state.v ../rtl/Rx/check_parity.v ../rtl/Rx/detect_start_bit.v' --

1. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/test_UART.v' to AST representation.
Generating RTLIL representation for module `\test_UART'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/UART.v' to AST representation.
Generating RTLIL representation for module `\UART'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/Tx/TxUART.v' to AST representation.
Generating RTLIL representation for module `\TxUART'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/Tx/PISO_shift_register.v' to AST representation.
Generating RTLIL representation for module `\PISO_shift_register'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/Tx/baud_generator.v' to AST representation.
Generating RTLIL representation for module `\baud_generator'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/Tx/Tx_top.v' to AST representation.
Generating RTLIL representation for module `\Tx_top'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/Tx/enable_generator.v' to AST representation.
Generating RTLIL representation for module `\enable_generator'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/Tx/test_Tx_top.v' to AST representation.
Generating RTLIL representation for module `\test_Tx_top'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/Rx/Rx_top.v' to AST representation.
Generating RTLIL representation for module `\Rx_top'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/Rx/synchronizer.v' to AST representation.
Generating RTLIL representation for module `\synchronizer'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/Rx/RxUART.v' to AST representation.
Generating RTLIL representation for module `\RxUART'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/Rx/sampling_strobe_generator.v' to AST representation.
Generating RTLIL representation for module `\sampling_strobe_generator'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/Rx/SIPO_shift_register.v' to AST representation.
Generating RTLIL representation for module `\SIPO_shift_register'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/Rx/rx_state.v' to AST representation.
Generating RTLIL representation for module `\rx_state'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/Rx/check_parity.v' to AST representation.
Generating RTLIL representation for module `\check_parity'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend.
Parsing formal Verilog input from `../rtl/Rx/detect_start_bit.v' to AST representation.
Generating RTLIL representation for module `\detect_start_bit'.
Successfully finished Verilog frontend.

-- Running command `prep -top Tx_top -nordff' --

17. Executing PREP pass.

17.1. Executing HIERARCHY pass (managing design hierarchy).

17.1.1. Analyzing design hierarchy..
Top module:  \Tx_top
Used module:     \PISO_shift_register
Used module:     \baud_generator
Used module:     \TxUART

17.1.2. Analyzing design hierarchy..
Top module:  \Tx_top
Used module:     \PISO_shift_register
Used module:     \baud_generator
Used module:     \TxUART
Removing unused module `\detect_start_bit'.
Removing unused module `\check_parity'.
Removing unused module `\rx_state'.
Removing unused module `\SIPO_shift_register'.
Removing unused module `\sampling_strobe_generator'.
Removing unused module `\RxUART'.
Removing unused module `\synchronizer'.
Removing unused module `\Rx_top'.
Removing unused module `\test_Tx_top'.
Removing unused module `\enable_generator'.
Removing unused module `\UART'.
Removing unused module `\test_UART'.
Removed 12 unused modules.
Module Tx_top directly or indirectly contains $assert cells -> setting "keep" attribute.
Module baud_generator directly or indirectly contains $assert cells -> setting "keep" attribute.

17.2. Executing PROC pass (convert processes to netlists).

17.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

17.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

17.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\PISO_shift_register.$proc$../rtl/Tx/PISO_shift_register.v:8$46'.
  Set init value: \data_out = 1'1
Found init rule in `\TxUART.$proc$../rtl/Tx/TxUART.v:22$43'.
  Set init value: \start_tx = 1'0
Found init rule in `\baud_generator.$proc$../rtl/Tx/baud_generator.v:29$60'.
  Set init value: $formal$../rtl/Tx/baud_generator.v:29$47_EN = 1'0
Found init rule in `\baud_generator.$proc$../rtl/Tx/baud_generator.v:22$59'.
  Set init value: \cnt = 13'0000000000000
Found init rule in `\baud_generator.$proc$../rtl/Tx/baud_generator.v:9$58'.
  Set init value: \counter = 0

17.2.4. Executing PROC_ARST pass (detect async resets in processes).

17.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\PISO_shift_register.$proc$../rtl/Tx/PISO_shift_register.v:8$46'.
     1/1: $1\data_out[0:0]
Creating decoders for process `\PISO_shift_register.$proc$../rtl/Tx/PISO_shift_register.v:18$45'.
     1/1: $0\data_out[0:0]
Creating decoders for process `\PISO_shift_register.$proc$../rtl/Tx/PISO_shift_register.v:10$44'.
     1/1: $0\data_shift_reg[8:0]
Creating decoders for process `\TxUART.$proc$../rtl/Tx/TxUART.v:22$43'.
     1/1: $1\start_tx[0:0]
Creating decoders for process `\TxUART.$proc$../rtl/Tx/TxUART.v:32$37'.
     1/1: $0\state[3:0]
Creating decoders for process `\TxUART.$proc$../rtl/Tx/TxUART.v:24$33'.
     1/1: $0\start_tx[0:0]
Creating decoders for process `\baud_generator.$proc$../rtl/Tx/baud_generator.v:29$60'.
     1/1: $0$formal$../rtl/Tx/baud_generator.v:29$47_EN[0:0]$61
Creating decoders for process `\baud_generator.$proc$../rtl/Tx/baud_generator.v:22$59'.
     1/1: $1\cnt[12:0]
Creating decoders for process `\baud_generator.$proc$../rtl/Tx/baud_generator.v:9$58'.
     1/1: $1\counter[31:0]
Creating decoders for process `\baud_generator.$proc$../rtl/Tx/baud_generator.v:24$50'.
     1/3: $0\cnt[12:0]
     2/3: $0$formal$../rtl/Tx/baud_generator.v:29$47_EN[0:0]$52
     3/3: $0$formal$../rtl/Tx/baud_generator.v:29$47_CHECK[0:0]$51
Creating decoders for process `\baud_generator.$proc$../rtl/Tx/baud_generator.v:13$48'.
     1/1: { $0\ck_stb[0:0] $0\counter[31:0] }

17.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

17.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\PISO_shift_register.\data_out' using process `\PISO_shift_register.$proc$../rtl/Tx/PISO_shift_register.v:18$45'.
  created $dff cell `$procdff$144' with positive edge clock.
Creating register for signal `\PISO_shift_register.\data_shift_reg' using process `\PISO_shift_register.$proc$../rtl/Tx/PISO_shift_register.v:10$44'.
  created $dff cell `$procdff$145' with positive edge clock.
Creating register for signal `\TxUART.\state' using process `\TxUART.$proc$../rtl/Tx/TxUART.v:32$37'.
  created $dff cell `$procdff$146' with positive edge clock.
Creating register for signal `\TxUART.\start_tx' using process `\TxUART.$proc$../rtl/Tx/TxUART.v:24$33'.
  created $dff cell `$procdff$147' with positive edge clock.
Creating register for signal `\baud_generator.\cnt' using process `\baud_generator.$proc$../rtl/Tx/baud_generator.v:24$50'.
  created $dff cell `$procdff$148' with positive edge clock.
Creating register for signal `\baud_generator.$formal$../rtl/Tx/baud_generator.v:29$47_CHECK' using process `\baud_generator.$proc$../rtl/Tx/baud_generator.v:24$50'.
  created $dff cell `$procdff$149' with positive edge clock.
Creating register for signal `\baud_generator.$formal$../rtl/Tx/baud_generator.v:29$47_EN' using process `\baud_generator.$proc$../rtl/Tx/baud_generator.v:24$50'.
  created $dff cell `$procdff$150' with positive edge clock.
Creating register for signal `\baud_generator.\ck_stb' using process `\baud_generator.$proc$../rtl/Tx/baud_generator.v:13$48'.
  created $dff cell `$procdff$151' with positive edge clock.
Creating register for signal `\baud_generator.\counter' using process `\baud_generator.$proc$../rtl/Tx/baud_generator.v:13$48'.
  created $dff cell `$procdff$152' with positive edge clock.

17.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `PISO_shift_register.$proc$../rtl/Tx/PISO_shift_register.v:8$46'.
Found and cleaned up 1 empty switch in `\PISO_shift_register.$proc$../rtl/Tx/PISO_shift_register.v:18$45'.
Removing empty process `PISO_shift_register.$proc$../rtl/Tx/PISO_shift_register.v:18$45'.
Found and cleaned up 1 empty switch in `\PISO_shift_register.$proc$../rtl/Tx/PISO_shift_register.v:10$44'.
Removing empty process `PISO_shift_register.$proc$../rtl/Tx/PISO_shift_register.v:10$44'.
Removing empty process `TxUART.$proc$../rtl/Tx/TxUART.v:22$43'.
Found and cleaned up 2 empty switches in `\TxUART.$proc$../rtl/Tx/TxUART.v:32$37'.
Removing empty process `TxUART.$proc$../rtl/Tx/TxUART.v:32$37'.
Found and cleaned up 2 empty switches in `\TxUART.$proc$../rtl/Tx/TxUART.v:24$33'.
Removing empty process `TxUART.$proc$../rtl/Tx/TxUART.v:24$33'.
Removing empty process `baud_generator.$proc$../rtl/Tx/baud_generator.v:29$60'.
Removing empty process `baud_generator.$proc$../rtl/Tx/baud_generator.v:22$59'.
Removing empty process `baud_generator.$proc$../rtl/Tx/baud_generator.v:9$58'.
Found and cleaned up 1 empty switch in `\baud_generator.$proc$../rtl/Tx/baud_generator.v:24$50'.
Removing empty process `baud_generator.$proc$../rtl/Tx/baud_generator.v:24$50'.
Removing empty process `baud_generator.$proc$../rtl/Tx/baud_generator.v:13$48'.
Cleaned up 7 empty switches.

17.3. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$procmux$126_CMP0' in module `TxUART' with $logic_not.
Replacing $eq cell `$eq$../rtl/Tx/TxUART.v:58$40' in module `TxUART' with $logic_not.
Replacing $mux cell `$procmux$139' (0) in module `\baud_generator' with constant driver `$procmux$139_Y = 1'0'.
Replacing $mux cell `$procmux$136' (0) in module `\baud_generator' with constant driver `$procmux$136_Y = $add$../rtl/Tx/baud_generator.v:26$53_Y [12:0]'.
Replacing $mux cell `$procmux$142' (0) in module `\baud_generator' with constant driver `$procmux$142_Y = 1'x'.

17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \PISO_shift_register..
  removed 5 unused temporary wires.
Finding unused cells or wires in module \TxUART..
  removed 7 unused temporary wires.
Finding unused cells or wires in module \Tx_top..
  removed 1 unused temporary wires.
Finding unused cells or wires in module \baud_generator..
  removing unused `$dff' cell `$procdff$148'.
  removing unused `$add' cell `$add$../rtl/Tx/baud_generator.v:14$49'.
  removing unused `$add' cell `$add$../rtl/Tx/baud_generator.v:26$53'.
  removing unused `$ge' cell `$ge$../rtl/Tx/baud_generator.v:29$54'.
  removing unused `$le' cell `$le$../rtl/Tx/baud_generator.v:29$55'.
  removing unused `$logic_and' cell `$logic_and$../rtl/Tx/baud_generator.v:29$56'.
  removing unused `$dff' cell `$procdff$152'.
  removing unused `$dff' cell `$procdff$151'.
  removing unused non-port wire \cnt.
  removing unused non-port wire \counter.
  removing unused non-port wire \ck_stb.
  removed 22 unused temporary wires.
Removed 8 unused cells and 35 unused wires.

17.5. Executing CHECK pass (checking for obvious problems).
checking module PISO_shift_register..
checking module TxUART..
checking module Tx_top..
checking module baud_generator..
found and reported 0 problems.

17.6. Executing OPT pass (performing simple optimizations).

17.6.1. Executing OPT_EXPR pass (perform const folding).

17.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\PISO_shift_register'.
Finding identical cells in module `\TxUART'.
  Cell `$procmux$125_CMP0' is identical to cell `$eq$../rtl/Tx/TxUART.v:29$36'.
    Redirecting output \Y: $procmux$125_CMP = $eq$../rtl/Tx/TxUART.v:29$36_Y
    Removing $eq cell `$procmux$125_CMP0' from module `\TxUART'.
  Cell `$procmux$126_CMP0' is identical to cell `$eq$../rtl/Tx/TxUART.v:58$40'.
    Redirecting output \Y: $procmux$126_CMP = $eq$../rtl/Tx/TxUART.v:58$40_Y
    Removing $logic_not cell `$procmux$126_CMP0' from module `\TxUART'.
Finding identical cells in module `\Tx_top'.
Finding identical cells in module `\baud_generator'.
Removed a total of 2 cells.

17.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \PISO_shift_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$114 (pure)
    Root of a mux tree: $procmux$117 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \TxUART..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$127 (pure)
    Root of a mux tree: $procmux$133 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \Tx_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \baud_generator..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

17.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \PISO_shift_register.
  Optimizing cells in module \TxUART.
    New input vector for $reduce_or cell $procmux$124_ANY: { $procmux$124_CMP [0] $procmux$124_CMP [1] $procmux$124_CMP [2] $procmux$124_CMP [3] $procmux$124_CMP [4] $procmux$124_CMP [5] $procmux$124_CMP [6] $procmux$124_CMP [7] }
  Optimizing cells in module \TxUART.
  Optimizing cells in module \Tx_top.
  Optimizing cells in module \baud_generator.
Performed a total of 1 changes.

17.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\PISO_shift_register'.
Finding identical cells in module `\TxUART'.
Finding identical cells in module `\Tx_top'.
Finding identical cells in module `\baud_generator'.
Removed a total of 0 cells.

17.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$149 ($dff) from module baud_generator.
Removing $procdff$150 ($dff) from module baud_generator.
Replaced 2 DFF cells.

17.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \PISO_shift_register..
Finding unused cells or wires in module \TxUART..
  removed 2 unused temporary wires.
Finding unused cells or wires in module \Tx_top..
Finding unused cells or wires in module \baud_generator..
  removed 2 unused temporary wires.
Removed 8 unused cells and 39 unused wires.

17.6.8. Executing OPT_EXPR pass (perform const folding).

17.6.9. Rerunning OPT passes. (Maybe there is more to do..)

17.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \PISO_shift_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$114 (pure)
    Root of a mux tree: $procmux$117 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \TxUART..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$127 (pure)
    Root of a mux tree: $procmux$133 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \Tx_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \baud_generator..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

17.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \PISO_shift_register.
  Optimizing cells in module \TxUART.
  Optimizing cells in module \Tx_top.
  Optimizing cells in module \baud_generator.
Performed a total of 0 changes.

17.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\PISO_shift_register'.
Finding identical cells in module `\TxUART'.
Finding identical cells in module `\Tx_top'.
Finding identical cells in module `\baud_generator'.
Removed a total of 0 cells.

17.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

17.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \PISO_shift_register..
Finding unused cells or wires in module \TxUART..
Finding unused cells or wires in module \Tx_top..
Finding unused cells or wires in module \baud_generator..
Removed 8 unused cells and 39 unused wires.

17.6.15. Executing OPT_EXPR pass (perform const folding).

17.6.16. Finished OPT passes. (There is nothing left to do.)

17.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell TxUART.$procmux$124_CMP5 ($eq).
Removed top 1 bits (of 4) from port B of cell TxUART.$procmux$124_CMP4 ($eq).
Removed top 1 bits (of 4) from port B of cell TxUART.$procmux$124_CMP3 ($eq).
Removed top 1 bits (of 4) from port B of cell TxUART.$procmux$124_CMP2 ($eq).
Removed top 2 bits (of 4) from port B of cell TxUART.$procmux$124_CMP1 ($eq).
Removed top 2 bits (of 4) from port B of cell TxUART.$procmux$124_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell TxUART.$eq$../rtl/Tx/TxUART.v:29$36 ($eq).
Removed top 3 bits (of 4) from mux cell TxUART.$ternary$../rtl/Tx/TxUART.v:36$38 ($mux).
Removed top 3 bits (of 4) from wire TxUART.$ternary$../rtl/Tx/TxUART.v:36$38_Y.

17.8. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

17.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \PISO_shift_register..
Finding unused cells or wires in module \TxUART..
  removed 1 unused temporary wires.
Finding unused cells or wires in module \Tx_top..
Finding unused cells or wires in module \baud_generator..
Removed 8 unused cells and 40 unused wires.

17.10. Executing MEMORY_COLLECT pass (generating $mem cells).

17.11. Executing OPT pass (performing simple optimizations).

17.11.1. Executing OPT_EXPR pass (perform const folding).

17.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\PISO_shift_register'.
Finding identical cells in module `\TxUART'.
Finding identical cells in module `\Tx_top'.
Finding identical cells in module `\baud_generator'.
Removed a total of 0 cells.

17.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

17.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \PISO_shift_register..
Finding unused cells or wires in module \TxUART..
Finding unused cells or wires in module \Tx_top..
Finding unused cells or wires in module \baud_generator..
Removed 8 unused cells and 40 unused wires.

17.11.5. Finished fast OPT passes.

17.12. Printing statistics.

=== PISO_shift_register ===

   Number of wires:                  7
   Number of wire bits:             31
   Number of public wires:           5
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $dff                            2
     $mux                            2

=== TxUART ===

   Number of wires:                 21
   Number of wire bits:             50
   Number of public wires:           7
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 24
     $add                            1
     $dff                            2
     $eq                            10
     $logic_and                      1
     $logic_not                      3
     $mux                            4
     $or                             1
     $pmux                           1
     $reduce_or                      1

=== Tx_top ===

   Number of wires:                  9
   Number of wire bits:             16
   Number of public wires:           9
   Number of public wire bits:      16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $reduce_xor                     1
     PISO_shift_register             1
     TxUART                          1
     baud_generator                  1

=== baud_generator ===

   Number of wires:                  2
   Number of wire bits:              2
   Number of public wires:           2
   Number of public wire bits:       2
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $assert                         1

=== design hierarchy ===

   Tx_top                            1
     PISO_shift_register             1
     TxUART                          1
     baud_generator                  1

   Number of wires:                 39
   Number of wire bits:             99
   Number of public wires:          23
   Number of public wire bits:      56
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 30
     $add                            1
     $assert                         1
     $dff                            4
     $eq                            10
     $logic_and                      1
     $logic_not                      3
     $mux                            6
     $or                             1
     $pmux                           1
     $reduce_or                      1
     $reduce_xor                     1

17.13. Executing CHECK pass (checking for obvious problems).
checking module PISO_shift_register..
checking module TxUART..
checking module Tx_top..
checking module baud_generator..
found and reported 0 problems.

-- Running command `write_smt2 -wires Tx.smt2' --

18. Executing SMT2 backend.
Creating SMT-LIBv2 representation of module TxUART.
Creating SMT-LIBv2 representation of module baud_generator.
Creating SMT-LIBv2 representation of module PISO_shift_register.
Creating SMT-LIBv2 representation of module Tx_top.

End of script. Logfile hash: 13e714826a
CPU: user 0.09s system 0.00s, MEM: 38.39 MB total, 9.01 MB resident
Yosys 0.7+365 (git sha1 4f31cb6d, gcc 7.2.0 -march=x86-64 -mtune=generic -O2 -fstack-protector-strong -fPIC -Os)
Time spent: 52% 17x read_verilog (0 sec), 13% 5x opt_expr (0 sec), ...
